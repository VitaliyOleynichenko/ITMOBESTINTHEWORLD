1. HTML: кнопка и разметка модалки (в index.php)
Добавьте рядом с вашей таблицей кнопку и модалку:

html
Копировать код
<!-- Кнопка для открытия модалки -->
<button id="openAddTaskBtn">Добавить задание</button>

<!-- Модалка выбора задания -->
<div class="modal" id="addTaskModal" style="display:none;">
  <div class="modal-content" id="addTaskContent">
    <span class="modal-close" id="closeAddTaskModal">&times;</span>
    <h2>Выберите задание для добавления</h2>

    <!-- Фильтр по дате -->
    <label>Дата (YYYY-MM-DD): 
      <input type="date" id="filterDate">
      <button id="filterTasksBtn">Поиск</button>
    </label>

    <!-- Список доступных заданий -->
    <table id="availableTasksTable">
      <thead>
        <tr>
          <th>ID_SEQ</th><th>DATNZ</th><th>NNZ</th><th>OCHER</th>
          <th>Выбрать</th>
        </tr>
      </thead>
      <tbody id="availableTasksBody">
        <!-- сюда придут строки -->
      </tbody>
    </table>
  </div>
</div>
2. CSS: стили для модалки
Добавьте в ваш style.css:

css
Копировать код
#openAddTaskBtn {
  margin: 10px 0;
  padding: 6px 12px;
  font-weight: bold;
}

.modal#addTaskModal {
  position: fixed; top:0; left:0; width:100%; height:100%;
  background: rgba(0,0,0,0.5);
  display: flex; align-items: center; justify-content: center;
  z-index: 5000;
}

.modal-content#addTaskContent {
  background: #fff;
  padding: 20px;
  border-radius: 6px;
  width: 90%; max-width: 700px;
  position: relative;
}

.modal-close#closeAddTaskModal {
  position: absolute; top:10px; right:14px;
  cursor: pointer; font-size: 24px;
}

#availableTasksTable {
  width: 100%; border-collapse: collapse; margin-top: 10px;
}
#availableTasksTable th, #availableTasksTable td {
  border: 1px solid #ccc; padding: 6px;
}
#availableTasksTable thead { background: #f0f0f0; }
3. PHP: api/get_available_tasks.php
php
Копировать код
<?php
// api/get_available_tasks.php
header('Content-Type: application/json; charset=UTF-8');

// Получаем опциональный фильтр даты из POST
$input = json_decode(file_get_contents('php://input'), true);
$filterDate = $input['date'] ?? null;

require __DIR__ . '/../db_connect.php';
if (!$conn) { http_response_code(500); echo json_encode(['error'=>'DB connect failed']); exit; }

// Базовый запрос
$sql = "
  SELECT ID_SEQ,
         TO_CHAR(DATNZ,'YYYY-MM-DD') AS DATNZ,
         NNZ,
         OCHER
    FROM V_TS_MNLZ2_TASK
";
if ($filterDate) {
  $sql .= " WHERE TO_CHAR(DATNZ,'YYYY-MM-DD') = :fdate";
}
$sql .= " ORDER BY DATNZ, NNZ, OCHER, ID_SEQ";

$stid = oci_parse($conn, $sql);
if ($filterDate) {
  oci_bind_by_name($stid, ':fdate', $filterDate);
}
if (!oci_execute($stid)) {
  $e=oci_error($stid);
  http_response_code(500);
  echo json_encode(['error'=>$e['message']]);
  exit;
}

$out=[];
while($r=oci_fetch_assoc($stid)) {
  $out[]=$r;
}
echo json_encode($out, JSON_UNESCAPED_UNICODE);
oci_free_statement($stid);
oci_close($conn);
4. PHP: api/add_task.php
php
Копировать код
<?php
// api/add_task.php
header('Content-Type: application/json; charset=UTF-8');

$in = json_decode(file_get_contents('php://input'), true);
$id_seq = $in['ID_SEQ'] ?? null;
$datnz  = $in['DATNZ']  ?? null;
$nnz    = $in['NNZ']    ?? null;

if (!$id_seq || !$datnz || !$nnz) {
  http_response_code(400);
  echo json_encode(['error'=>'Missing key fields']);
  exit;
}

require __DIR__ . '/../db_connect.php';
if (!$conn) { http_response_code(500); echo json_encode(['error'=>'DB connect failed']); exit; }

// Вставляем выбранную задачу в T_TS_MNLZ2_TASK25
$sql = "
  INSERT INTO T_TS_MNLZ2_TASK25
    (ID_SEQ, DATNZ, NNZ, OCHER)
  SELECT ID_SEQ, DATNZ, NNZ, OCHER
    FROM V_TS_MNLZ2_TASK
   WHERE ID_SEQ = :id_seq
     AND TO_CHAR(DATNZ,'YYYY-MM-DD') = :datnz
     AND NNZ = :nnz
";
$stid = oci_parse($conn, $sql);
oci_bind_by_name($stid, ':id_seq', $id_seq);
oci_bind_by_name($stid, ':datnz',  $datnz);
oci_bind_by_name($stid, ':nnz',    $nnz);
if (!oci_execute($stid, OCI_COMMIT_ON_SUCCESS)) {
  $e=oci_error($stid);
  http_response_code(500);
  echo json_encode(['error'=>$e['message']]);
  exit;
}

echo json_encode(['success'=>true]);
oci_free_statement($stid);
oci_close($conn);
5. JavaScript: логика открытия модалки и AJAX
html
Копировать код
<script>
// Открытие/закрытие модалки
const openBtn  = document.getElementById('openAddTaskBtn');
const modal    = document.getElementById('addTaskModal');
const closeBtn = document.getElementById('closeAddTaskModal');
openBtn.addEventListener('click', ()=> {
  modal.style.display = 'flex';
  loadAvailableTasks();  // сразу загрузка без фильтра
});
closeBtn.addEventListener('click', ()=> modal.style.display='none');

// Загрузка списка доступных заданий
async function loadAvailableTasks() {
  console.group('loadAvailableTasks');
  const date = document.getElementById('filterDate').value;
  console.log('Filter date:', date);
  try {
    const resp = await fetch('api/get_available_tasks.php', {
      method:'POST',
      headers:{'Content-Type':'application/json'},
      body: JSON.stringify({ date })
    });
    console.log('HTTP',resp.status);
    const list = await resp.json();
    console.log('Tasks:', list);
    const tbody = document.getElementById('availableTasksBody');
    tbody.innerHTML = '';
    list.forEach(item => {
      const tr = document.createElement('tr');
      tr.innerHTML = `
        <td>${item.ID_SEQ}</td>
        <td>${item.DATNZ}</td>
        <td>${item.NNZ}</td>
        <td>${item.OCHER}</td>
        <td>
          <button class="selectBtn"
                  data-idseq="${item.ID_SEQ}"
                  data-datnz="${item.DATNZ}"
                  data-nnz="${item.NNZ}">
            Выбрать
          </button>
        </td>
      `;
      tbody.appendChild(tr);
    });
    // Навешиваем обработчики на все кнопки «Выбрать»
    document.querySelectorAll('.selectBtn').forEach(btn=>{
      btn.addEventListener('click', onSelectTask);
    });
  } catch(err) {
    console.error('Error loadAvailableTasks:', err);
  }
  console.groupEnd();
}

// Обработчик выбора и добавления в базу
async function onSelectTask(e) {
  const btn = e.currentTarget;
  const payload = {
    ID_SEQ: btn.dataset.idseq,
    DATNZ:  btn.dataset.datnz,
    NNZ:    btn.dataset.nnz
  };
  console.group('onSelectTask');
  console.log('Adding task:', payload);
  try {
    const resp = await fetch('api/add_task.php', {
      method:'POST',
      headers:{'Content-Type':'application/json'},
      body: JSON.stringify(payload)
    });
    console.log('HTTP', resp.status);
    const js = await resp.json();
    console.log('add_task response:', js);
    if (js.success) {
      alert('Задание добавлено!');
      modal.style.display = 'none';
      // обновим таблицу на странице
      reloadTasks();
    } else {
      alert('Ошибка: ' + (js.error||'unknown'));
    }
  } catch(err) {
    console.error('Error onSelectTask:', err);
  }
  console.groupEnd();
}

// Поиск по дате
document.getElementById('filterTasksBtn')
        .addEventListener('click', loadAvailableTasks);

// Предполагаем, что у вас уже есть функция reloadTasks() для обновления главной таблицы
</script>
Итог
Кнопка «Добавить задание» открывает модалку.

Модалка: input[type=date] + «Поиск» → динамически загружает задачи из V_TS_MNLZ2_TASK.

Таблица с кнопками «Выбрать» вставляет выбранную задачу в T_TS_MNLZ2_TASK25 через add_task.php.

После успешного добавления модалка закрывается, и вызывается reloadTasks() чтобы обновить основной список.

Всё — чистый JavaScript + PHP + Oracle.








Инструменты



ChatGPT может допус

/* Модалка и её содержимое */
.modal#addTaskModal {
  position: fixed;
  top: 0; left: 0; right: 0; bottom: 0;
  background: rgba(0,0,0,0.5);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 5000;
}

.modal-content#addTaskContent {
  background: #fff;
  padding: 20px;
  border-radius: 6px;
  width: 90%;
  max-width: 800px;
  max-height: 90vh;       /* ограничиваем высоту модалки */
  display: flex;
  flex-direction: column;
  box-sizing: border-box;
  position: relative;
}

/* Кнопка закрытия */
.modal-close#closeAddTaskModal {
  position: absolute;
  top: 10px; right: 14px;
  font-size: 24px;
  cursor: pointer;
}

/* Форма фильтра сверху */
#addTaskContent label {
  display: block;
  margin-bottom: 12px;
}

/* Контейнер для таблицы */
#availableTasksTable {
  width: 100%;
  border-collapse: collapse;
}

#availableTasksTable thead {
  background: #f0f0f0;
}

/* Делаем thead фиксированным, tbody — прокручиваемым */
#availableTasksTable thead,
#availableTasksTable tbody {
  display: block;
}

#availableTasksTable thead tr {
  display: table;
  table-layout: fixed;
  width: 100%;
}

#availableTasksTable tbody {
  display: block;
  height: 50vh;             /* или любая другая высота, например 300px */
  overflow-y: auto;
  overflow-x: hidden;
  width: 100%;
}

/* Ячейки таблицы */
#availableTasksTable th,
#availableTasksTable td {
  padding: 8px;
  border: 1px solid #ccc;
  text-align: left;
  /* фиксированная ширина столбцов можно задать здесь */
}

/* Для одинаковой ширины столбцов */
#availableTasksTable th:nth-child(1),
#availableTasksTable td:nth-child(1) { width: 15%; }
#availableTasksTable th:nth-child(2),
#availableTasksTable td:nth-child(2) { width: 20%; }
#availableTasksTable th:nth-child(3),
#availableTasksTable td:nth-child(3) { width: 15%; }
#availableTasksTable th:nth-child(4),
#availableTasksTable td:nth-child(4) { width: 30%; }
#availableTasksTable th:nth-child(5),
#availableTasksTable td:nth-child(5) { width: 20%; }

/* Полосы прокрутки в WebKit */
#availableTasksTable tbody::-webkit-scrollbar {
  width: 8px;
}
#availableTasksTable tbody::-webkit-scrollbar-thumb {
  background: rgba(0,0,0,0.2);
  border-radius: 4px;
}

/* Зебра */
#availableTasksTable tbody tr:nth-child(even) {
  background: #fafafa;
}

/* Кнопка «Выбрать» */
.selectBtn {
  padding: 4px 8px;
  font-size: 0.9em;
  cursor: pointer;
}


