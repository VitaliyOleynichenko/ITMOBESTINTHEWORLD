/* Контейнер меню */
.context-menu {
  background: #fff;
  border: 1px solid #ccc;
  box-shadow: 0 2px 6px rgba(0,0,0,0.2);
  padding: 4px;
  z-index: 10000;
}
/* Кнопки внутри меню */
.context-menu-button {
  display: block;
  width: 100%;
  padding: 4px 8px;
  background: none;
  border: none;
  text-align: left;
  cursor: pointer;
}
.context-menu-button:hover {
  background: #eef;
}
/* Подсветка выбранной строки */
.highlighted-row {
  background: rgba(100,200,255,0.3) !important;
}


// ==================== ГЛОБАЛЬНЫЕ ====================
let tableinf = [];       // сюда кладём данные из get_tasks.php
let selectedRow = null;  // DOM‑узел <tr>, по которому кликнули

// контейнер для контекст‑меню
const menuEl = document.getElementById('menuTd');
if (!menuEl) {
  console.error('Не найден <div id="menuTd"> для контекст‑меню!');
}
menuEl.style.position = 'absolute';
menuEl.style.display  = 'none';
menuEl.className      = 'context-menu';

// ==================== 1) ЗАГРУЗКА ТАБЛИЦЫ ====================
document.addEventListener('DOMContentLoaded', reloadTable);

async function reloadTable() {
  try {
    tableinf = await fetchDataFromServer();
  } catch (err) {
    console.error('Ошибка загрузки данных:', err);
    tableinf = [];
  }
  addRow();
  setupTableClick();
}

// ==================== 2) ФЕТЧ ИЗ PHP ====================
async function fetchDataFromServer() {
  const resp = await fetch('api/get_tasks.php');
  if (!resp.ok) throw new Error(resp.statusText);
  const data = await resp.json();
  // Приведём поля к тому, что ожидает addRow()
  return data.map(item => ({
    id_seq:       item.ID_SEQ,
    datnz:        item.DATNZ,
    nnz:          item.NNZ,
    ocher:        item.OCHER,
    position:     item.POSITION,
    priority:     item.PRIORITY,
    status:       item.STATUS,
    dzag1:        item.DZAG1,
    dzag2:        item.DZAG2,
    kol1p:        item.KOL1P,
    dlot:         item.DLOT,
    marked_count: item.MARKED_COUNT
    // … остальное по необходимости
  }));
}

// ==================== 3) ОТРИСОВКА СТРОК (addRow) ====================
function addRow() {
  const tbody = document.querySelector('#tableTZ0 tbody');
  if (!tbody) {
    console.warn('tbody не найден');
    return;
  }
  tbody.innerHTML = '';

  tableinf.forEach((row, i) => {
    const tr = document.createElement('tr');
    tr.dataset.index    = i;
    tr.dataset.priority = row.priority;
    tr.dataset.status   = row.status;

    // Формируем текст ячеек точно как у вас в старом коде
    const idText     = `${row.datnz} ${row.nnz} ${row.id_seq}`;
    const slabb      = `${row.dzag1}/${row.dzag2}`;
    const needCut    = `${row.kol1p||''}/${row.dlot||''}`;
    const statusText = row.priority == 1 ? 'Распределён' : 'Не распределён';

    const fields = [
      row.position || '',  // позиция
      idText,              // длинная строка
      row.nnmr || '',      // Марка (NNMR)
      slabb,               // Крат: / заготовок
      needCut,             // Нужно/факт
      row.marked_count || '', // Размечено
      statusText           // Статус
    ];

    fields.forEach(txt => {
      const td = document.createElement('td');
      td.textContent = txt;
      tr.appendChild(td);
    });

    tbody.appendChild(tr);
  });
}

// ==================== 4) КЛИК ПО ТАБЛИЦЕ ====================
function setupTableClick() {
  document.removeEventListener('click', tableClick);
  document.addEventListener('click', tableClick);
}

function tableClick(e) {
  const tr = e.target.closest('tr');
  if (tr && tr.parentNode.tagName.toLowerCase() === 'tbody') {
    // кликнули именно по строке таблицы
    if (selectedRow) selectedRow.classList.remove('highlighted-row');
    selectedRow = tr;
    tr.classList.add('highlighted-row');
    // и показываем меню
    showMenu(tr, e.pageX, e.pageY);
  } else {
    hideMenu();
  }
}

// ==================== 5) КОНТЕКСТ‑МЕНЮ ====================
function showMenu(tr, pageX, pageY) {
  hideMenu();  // на всякий
  // получаем нужные данные из строки
  const idx      = +tr.dataset.index;
  const priority = +tr.dataset.priority;
  const status   = +tr.dataset.status;

  // наполняем menuEl
  menuEl.innerHTML = '';
  if (status !== 1) {    // если не «завершено»
    addBtn(menuEl, '↑ Вверх',    () => moveUp(idx));
    addBtn(menuEl, '↓ Вниз',     () => moveDown(idx));
    if (priority === 0) {
      addBtn(menuEl, 'Следующий ▶', () => promote(idx));
    } else {
      addBtn(menuEl, 'Отложить ⏸',  () => postpone(idx));
    }
    addBtn(menuEl, 'Закончить ✖',  () => finishTask(idx));
  }

  // Позиционируем рядом с курсором
  menuEl.style.top     = pageY + 'px';
  menuEl.style.left    = pageX + 'px';
  menuEl.style.display = 'block';

  // клик вне меню скроет его
  setTimeout(()=>{
    document.addEventListener('click', onDocClick);
  },0);
}

function hideMenu() {
  menuEl.style.display = 'none';
  if (selectedRow) {
    selectedRow.classList.remove('highlighted-row');
    selectedRow = null;
  }
  document.removeEventListener('click', onDocClick);
}

function onDocClick(e) {
  if (!menuEl.contains(e.target)) {
    hideMenu();
  }
}

function addBtn(container, label, fn) {
  const btn = document.createElement('button');
  btn.textContent = label;
  btn.className   = 'context-menu-button';
  btn.onclick     = async () => {
    await fn();
    hideMenu();
    await reloadTable();
  };
  container.appendChild(btn);
}

// ==================== 6) ДЕЙСТВИЯ, ВЫЗЫВАЮЩИЕ PHP ====================
async function moveUp(idx) {
  await postAction('move_up.php', tableinf[idx]);
}
async function moveDown(idx) {
  await postAction('move_down.php', tableinf[idx]);
}
async function promote(idx) {
  await postAction('promote.php', tableinf[idx]);
}
async function postpone(idx) {
  await postAction('postpone.php', tableinf[idx]);
}
async function finishTask(idx) {
  await postAction('finish.php', tableinf[idx]);
}

async function postAction(endpoint, payload) {
  await fetch(`api/${endpoint}`, {
    method: 'POST',
    headers:{ 'Content-Type':'application/json' },
    body: JSON.stringify(payload)
  });
}






































Ниже полный набор всех PHP‑скриптов, которые нужны в папке api/:

1) api/db_connect.php
php
Копировать
Редактировать
<?php
// Подключение к Oracle
// Замените USERNAME, PASSWORD и CONNECTION_STRING на ваши реальные
$username          = 'YOUR_USERNAME';
$password          = 'YOUR_PASSWORD';
$connection_string = 'HOST:PORT/SERVICE_NAME'; 

// Пример CONNECTION_STRING: "dbhost.example.com:1521/OPTIM"
// В вашем случае вместо HOST:PORT/SERVICE_NAME подставьте то, что знаете.
// Если нужна SID, то "HOST:PORT/SID".

$conn = oci_connect($username, $password, $connection_string);
if (!$conn) {
    $e = oci_error();
    header('Content-Type: application/json', true, 500);
    echo json_encode(['error' => $e['message']]);
    exit;
}
?>
2) api/get_tasks.php
php
Копировать
Редактировать
<?php
header('Content-Type: application/json; charset=UTF-8');
require __DIR__ . '/db_connect.php';

$sql = "
  SELECT 
    ID_SEQ,
    TO_CHAR(DATNZ,'YYYY-MM-DD') AS DATNZ,
    NNZ,
    OCHER,
    POSITION,
    PRIORITY,
    STATUS,
    DZAG1,
    DZAG2,
    KOL1P,
    DLOT,
    MARKED_COUNT
  FROM TS.T_TS_MNLZ2_TASK25
  ORDER BY 
    NVL(POSITION,9999),         -- сначала приоритетные, по позиции
    DATNZ, NNZ, OCHER, ID_SEQ   -- затем все остальные по дате/номеру/очереди
";

$stid = oci_parse($conn, $sql);
oci_execute($stid);

$out = [];
while ($row = oci_fetch_assoc($stid)) {
    $out[] = $row;
}

oci_free_statement($stid);
oci_close($conn);

echo json_encode($out, JSON_UNESCAPED_UNICODE);
3) api/move_up.php
php
Копировать
Редактировать
<?php
header('Content-Type: application/json; charset=UTF-8');
$data = json_decode(file_get_contents('php://input'), true);
require __DIR__ . '/db_connect.php';

$id_seq = $data['id_seq'];
$datnz  = $data['datnz'];  // формат YYYY-MM-DD
$nnz    = $data['nnz'];

$sql = "
  DECLARE
    cur_pos   NUMBER;
    other_id  TS.T_TS_MNLZ2_TASK25.ID_SEQ%TYPE;
    other_dn  TS.T_TS_MNLZ2_TASK25.DATNZ%TYPE;
    other_nn  TS.T_TS_MNLZ2_TASK25.NNZ%TYPE;
  BEGIN
    -- текущее положение
    SELECT POSITION 
      INTO cur_pos
      FROM TS.T_TS_MNLZ2_TASK25
     WHERE ID_SEQ = :id_seq
       AND DATNZ  = TO_DATE(:datnz,'YYYY-MM-DD')
       AND NNZ    = :nnz;

    IF cur_pos > 1 THEN
      -- найдём задачу, у которой позиция = cur_pos-1
      SELECT ID_SEQ, DATNZ, NNZ
        INTO other_id, other_dn, other_nn
        FROM TS.T_TS_MNLZ2_TASK25
       WHERE PRIORITY = 1
         AND POSITION = cur_pos-1
       FOR UPDATE;

      -- обменяем позиции
      UPDATE TS.T_TS_MNLZ2_TASK25
         SET POSITION = cur_pos
       WHERE ID_SEQ = other_id
         AND DATNZ  = other_dn
         AND NNZ    = other_nn;

      UPDATE TS.T_TS_MNLZ2_TASK25
         SET POSITION = cur_pos-1
       WHERE ID_SEQ = :id_seq
         AND DATNZ  = TO_DATE(:datnz,'YYYY-MM-DD')
         AND NNZ    = :nnz;
    END IF;
    COMMIT;
  END;
";

$stid = oci_parse($conn, $sql);
oci_bind_by_name($stid, ':id_seq', $id_seq);
oci_bind_by_name($stid, ':datnz',  $datnz);
oci_bind_by_name($stid, ':nnz',    $nnz);
oci_execute($stid);
oci_free_statement($stid);
oci_close($conn);

echo json_encode(['ok'=>true]);
4) api/move_down.php
php
Копировать
Редактировать
<?php
header('Content-Type: application/json; charset=UTF-8');
$data = json_decode(file_get_contents('php://input'), true);
require __DIR__ . '/db_connect.php';

$id_seq = $data['id_seq'];
$datnz  = $data['datnz'];
$nnz    = $data['nnz'];

$sql = "
  DECLARE
    cur_pos   NUMBER;
    max_pos   NUMBER;
    other_id  TS.T_TS_MNLZ2_TASK25.ID_SEQ%TYPE;
    other_dn  TS.T_TS_MNLZ2_TASK25.DATNZ%TYPE;
    other_nn  TS.T_TS_MNLZ2_TASK25.NNZ%TYPE;
  BEGIN
    -- текущее положение и макс позицию среди priority=1
    SELECT POSITION, MAX(POSITION) 
      INTO cur_pos, max_pos
      FROM TS.T_TS_MNLZ2_TASK25
     WHERE PRIORITY = 1
     GROUP BY POSITION;

    IF cur_pos < max_pos THEN
      -- найдём задачу на cur_pos+1
      SELECT ID_SEQ, DATNZ, NNZ
        INTO other_id, other_dn, other_nn
        FROM TS.T_TS_MNLZ2_TASK25
       WHERE PRIORITY = 1
         AND POSITION = cur_pos+1
       FOR UPDATE;

      -- обмен позиций
      UPDATE TS.T_TS_MNLZ2_TASK25
         SET POSITION = cur_pos
       WHERE ID_SEQ = other_id
         AND DATNZ  = other_dn
         AND NNZ    = other_nn;

      UPDATE TS.T_TS_MNLZ2_TASK25
         SET POSITION = cur_pos+1
       WHERE ID_SEQ = :id_seq
         AND DATNZ  = TO_DATE(:datnz,'YYYY-MM-DD')
         AND NNZ    = :nnz;
    END IF;
    COMMIT;
  END;
";

$stid = oci_parse($conn, $sql);
oci_bind_by_name($stid, ':id_seq', $id_seq);
oci_bind_by_name($stid, ':datnz',  $datnz);
oci_bind_by_name($stid, ':nnz',    $nnz);
oci_execute($stid);
oci_free_statement($stid);
oci_close($conn);

echo json_encode(['ok'=>true]);
5) api/promote.php
php
Копировать
Редактировать
<?php
header('Content-Type: application/json; charset=UTF-8');
$data = json_decode(file_get_contents('php://input'), true);
require __DIR__ . '/db_connect.php';

$id_seq = $data['id_seq'];
$datnz  = $data['datnz'];
$nnz    = $data['nnz'];

$sql = "
  DECLARE
    v_max NUMBER;
  BEGIN
    -- сдвинем вниз всех текущих priority=1
    UPDATE TS.T_TS_MNLZ2_TASK25
       SET POSITION = POSITION + 1
     WHERE PRIORITY = 1;

    -- найдём новую «голову»
    SELECT MAX(POSITION) 
      INTO v_max
      FROM TS.T_TS_MNLZ2_TASK25
     WHERE PRIORITY = 1;

    -- обновим саму запись
    UPDATE TS.T_TS_MNLZ2_TASK25
       SET PRIORITY = 1,
           POSITION = 1
     WHERE ID_SEQ = :id_seq
       AND DATNZ  = TO_DATE(:datnz,'YYYY-MM-DD')
       AND NNZ    = :nnz;

    COMMIT;
  END;
";

$stid = oci_parse($conn, $sql);
oci_bind_by_name($stid, ':id_seq', $id_seq);
oci_bind_by_name($stid, ':datnz',  $datnz);
oci_bind_by_name($stid, ':nnz',    $nnz);
oci_execute($stid);
oci_free_statement($stid);
oci_close($conn);

echo json_encode(['ok'=>true]);
6) api/postpone.php
php
Копировать
Редактировать
<?php
header('Content-Type: application/json; charset=UTF-8');
$data = json_decode(file_get_contents('php://input'), true);
require __DIR__ . '/db_connect.php';

$id_seq = $data['id_seq'];
$datnz  = $data['datnz'];
$nnz    = $data['nnz'];

$sql = "
  BEGIN
    UPDATE TS.T_TS_MNLZ2_TASK25
       SET PRIORITY = 0,
           POSITION = NULL
     WHERE ID_SEQ = :id_seq
       AND DATNZ  = TO_DATE(:datnz,'YYYY-MM-DD')
       AND NNZ    = :nnz;
    COMMIT;
  END;
";

$stid = oci_parse($conn, $sql);
oci_bind_by_name($stid, ':id_seq', $id_seq);
oci_bind_by_name($stid, ':datnz',  $datnz);
oci_bind_by_name($stid, ':nnz',    $nnz);
oci_execute($stid);
oci_free_statement($stid);
oci_close($conn);

echo json_encode(['ok'=>true]);
7) api/finish.php
php
Копировать
Редактировать
<?php
header('Content-Type: application/json; charset=UTF-8');
$data = json_decode(file_get_contents('php://input'), true);
require __DIR__ . '/db_connect.php';

$id_seq = $data['id_seq'];
$datnz  = $data['datnz'];
$nnz    = $data['nnz'];

$sql = "
  BEGIN
    UPDATE TS.T_TS_MNLZ2_TASK25
       SET STATUS = 1
     WHERE ID_SEQ = :id_seq
       AND DATNZ  = TO_DATE(:datnz,'YYYY-MM-DD')
       AND NNZ    = :nnz;
    COMMIT;
  END;
";

$stid = oci_parse($conn, $sql);
oci_bind_by_name($stid, ':id_seq', $id_seq);
oci_bind_by_name($stid, ':datnz',  $datnz);
oci_bind_by_name($stid, ':nnz',    $nnz);
oci_execute($stid);
oci_free_statement($stid);
oci_close($conn);

echo json_encode(['ok'=>true]);
Кратко о каждом файле:

db_connect.php — единый вход в БД, коннект по OCI.

get_tasks.php — отдаёт JSON‑массив из T_TS_MNLZ2_TASK25.

move_up.php / move_down.php — меняют местами позиции двух priority=1 записей.

promote.php — делает задачу приоритетной (priority=1), вставляет её в начало списка (position=1), сдвигая остальных вниз.

postpone.php — снимает приоритет (priority=0), сбрасывает position.

finish.php — помечает задачу завершённой (status=1).

После этого ваш JS из предыдущего ответа будет работать «из коробки».



















1) api/promote.php
php
Копировать код
<?php
header('Content-Type: application/json; charset=UTF-8');
ini_set('display_errors',1);
error_reporting(E_ALL);

$data = json_decode(file_get_contents('php://input'), true);
require __DIR__ . '/db_connect.php';

$id_seq = $data['id_seq'];
$datnz  = $data['datnz'];
$nnz    = $data['nnz'];

$sql = "
DECLARE
  v_old_prio NUMBER;
  v_old_pos  NUMBER;
BEGIN
  -- Сначала захватим текущий приоритет и позицию этой задачи (если есть)
  SELECT PRIORITY, POSITION
    INTO v_old_prio, v_old_pos
    FROM TS.T_TS_MNLZ2_TASK25
   WHERE ID_SEQ = :id_seq
     AND DATNZ  = TO_DATE(:datnz,'YYYY-MM-DD')
     AND NNZ    = :nnz
   FOR UPDATE;

  IF v_old_prio = 1 THEN
    -- Если она уже была в приоритете, сдвигаем вниз только тех, кто
    -- стоял выше неё (позиции < её старой позиции)
    UPDATE TS.T_TS_MNLZ2_TASK25
       SET POSITION = POSITION + 1
     WHERE PRIORITY = 1
       AND POSITION < v_old_pos;
  ELSE
    -- Если она НЕ была приоритетной, сдвигаем вниз всех текущих
    UPDATE TS.T_TS_MNLZ2_TASK25
       SET POSITION = POSITION + 1
     WHERE PRIORITY = 1;
  END IF;

  -- И, наконец, делаем эту задачу приоритетной и ставим её на позицию 1
  UPDATE TS.T_TS_MNLZ2_TASK25
     SET PRIORITY = 1,
         POSITION = 1
   WHERE ID_SEQ = :id_seq
     AND DATNZ  = TO_DATE(:datnz,'YYYY-MM-DD')
     AND NNZ    = :nnz;

  COMMIT;
END;";

$stid = oci_parse($conn, $sql);
oci_bind_by_name($stid, ':id_seq', $id_seq);
oci_bind_by_name($stid, ':datnz',  $datnz);
oci_bind_by_name($stid, ':nnz',    $nnz);
oci_execute($stid);
oci_free_statement($stid);
oci_close($conn);

echo json_encode(['ok'=>true]);
2) api/postpone.php
php
Копировать код
<?php
header('Content-Type: application/json; charset=UTF-8');
ini_set('display_errors',1);
error_reporting(E_ALL);

$data = json_decode(file_get_contents('php://input'), true);
require __DIR__ . '/db_connect.php';

$id_seq = $data['id_seq'];
$datnz  = $data['datnz'];
$nnz    = $data['nnz'];

$sql = "
DECLARE
  v_old_pos NUMBER;
BEGIN
  -- Считаем, с какой позиции будем «вытаскивать» задачу
  SELECT POSITION
    INTO v_old_pos
    FROM TS.T_TS_MNLZ2_TASK25
   WHERE ID_SEQ = :id_seq
     AND DATNZ  = TO_DATE(:datnz,'YYYY-MM-DD')
     AND NNZ    = :nnz
   FOR UPDATE;

  -- Снимаем приоритет и обнуляем позицию у нашей задачи
  UPDATE TS.T_TS_MNLZ2_TASK25
     SET PRIORITY = 0,
         POSITION = NULL
   WHERE ID_SEQ = :id_seq
     AND DATNZ  = TO_DATE(:datnz,'YYYY-MM-DD')
     AND NNZ    = :nnz;

  -- Сдвигаем «вверх» всех, кто стоял ниже отложенной (позиции > v_old_pos)
  UPDATE TS.T_TS_MNLZ2_TASK25
     SET POSITION = POSITION - 1
   WHERE PRIORITY = 1
     AND POSITION > v_old_pos;

  COMMIT;
END;";

$stid = oci_parse($conn, $sql);
oci_bind_by_name($stid, ':id_seq', $id_seq);
oci_bind_by_name($stid, ':datnz',  $datnz);
oci_bind_by_name($stid, ':nnz',    $nnz);
oci_execute($stid);
oci_free_statement($stid);
oci_close($conn);

echo json_encode(['ok'=>true]);
Краткое пояснение логики
promote.php

Читает старые PRIORITY и POSITION для выбранной задачи.

Если задача уже была приоритетной, то сдвигает вниз (позицию+1) всех, кто стоял выше неё (позиции < старой).
Если ещё не была — сдвигает вниз всех приоритетных сразу.

Обновляет саму задачу: PRIORITY=1, POSITION=1.

Коммитит.

postpone.php

Читает старую POSITION выбранной задачи.

Снимает у неё приоритет и обнуляет позицию (PRIORITY=0, POSITION=NULL).

Сдвигает вверх (позицию–1) всех приоритетных задач, которые стояли ниже отложенной (позиции > старая).

Коммитит.

Эти две процедуры теперь поддерживают ровную перестановку при добавлении («Следующий») и удалении («Отложить») из приоритетного списка.







