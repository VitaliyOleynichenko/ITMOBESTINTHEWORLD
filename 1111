// ============ Глобальные переменные ============
let tableinf = [];      // данные из БД
let selectedRow = null; // DOM‑элемент выбранной <tr>
let menuEl = null;      // DOM‑элемент контекст‑меню

// ============ 1) Загрузка и отображение таблицы ============
async function reloadTable() {
  try {
    tableinf = await fetchDataFromServer();
  } catch (e) {
    console.error('Не удалось загрузить данные:', e);
    tableinf = [];
  }
  addRow();       // ваша функция, которая заполняет <tbody>
  setupTableClick(); // навесим клик‑лисенер
}

// ============ 2) Фетч данных из PHP =============
async function fetchDataFromServer() {
  const resp = await fetch('api/get_tasks.php');
  if (!resp.ok) throw new Error(resp.statusText);
  const data = await resp.json();
  // приводим к тому, что ожидает addRow()
  return data.map(item => ({
    id_seq:       item.ID_SEQ,
    datnz:        item.DATNZ,
    nnz:          item.NNZ,
    ocher:        item.OCHER,
    position:     item.POSITION,
    priority:     item.PRIORITY,
    status:       item.STATUS,
    dzag1:        item.DZAG1,
    dzag2:        item.DZAG2,
    krat:         item.KRAT,
    dlot:         item.DLOT,
    marked_count: item.MARKED_COUNT
    // … остальные поля, которые вам нужны
  }));
}

// ============ 3) Перерисовка строк =============
function addRow() {
  const tbody = document.querySelector('#tableTZ0 tbody');
  if (!tbody) {
    console.warn('tbody не найден');
    return;
  }
  tbody.innerHTML = '';
  tableinf.forEach((row, i) => {
    const tr = document.createElement('tr');
    tr.dataset.index    = i;
    tr.dataset.priority = row.priority;
    tr.dataset.status   = row.status;
    // формируем содержимое ячеек в том же порядке, как у вас было:
    const idText      = `${row.datnz} ${row.nnz} ${row.id_seq}`;
    const slabb       = `${row.dzag1}/${row.dzag2}`;
    const needCut     = `${row.kol1p || ''}/${row.dlot || ''}`;
    const kratText    = `${row.krat || ''} x ${row.dlot || ''}`;
    const statusText  = row.priority == 1 ? 'Распределён' : 'Не распределён';

    const fields = [
      row.position || '',  // позиция
      row.id_seq,
      row.ocher,
      slabb,
      needCut,
      row.marked_count || '',
      statusText
    ];

    fields.forEach(text => {
      const td = document.createElement('td');
      td.textContent = text;
      tr.appendChild(td);
    });

    tbody.appendChild(tr);
  });
}

// ============ 4) Установка клика на таблицу ============
function setupTableClick() {
  document.removeEventListener('click', tableClick);
  document.addEventListener('click', tableClick);
}

function tableClick(e) {
  const tr = e.target.closest('tr');
  // клик по строке внутри tbody
  if (tr && tr.parentNode.tagName.toLowerCase() === 'tbody') {
    // убираем подсветку старой
    if (selectedRow) selectedRow.classList.remove('highlighted-row');
    // сохраняем новую
    selectedRow = tr;
    tr.classList.add('highlighted-row');
    // показываем меню действий
    showMenu(tr, e.pageX, e.pageY);
  } else {
    // клик вне строки — скрыть меню
    hideMenu();
  }
}

// ============ 5) Контекст‑меню ============
function showMenu(tr, x, y) {
  hideMenu(); // почистим старое

  const idx      = +tr.dataset.index;
  const priority = +tr.dataset.priority;
  const status   = +tr.dataset.status;

  // создаём меню
  menuEl = document.createElement('div');
  menuEl.className = 'context-menu';
  menuEl.style.top  = y + 'px';
  menuEl.style.left = x + 'px';

  // кнопки всегда вверх/вниз, если не завершено
  if (status !== 1) {
    addBtn(menuEl, '↑ Вверх',   () => moveUp(idx));
    addBtn(menuEl, '↓ Вниз',    () => moveDown(idx));

    if (priority === 0) {
      addBtn(menuEl, 'Следующий ▶', () => promote(idx));
    } else {
      addBtn(menuEl, 'Отложить ⏸',  () => postpone(idx));
    }
    addBtn(menuEl, 'Закончить ✖',   () => finishTask(idx));
  }

  document.body.appendChild(menuEl);
  // клик в любом месте закрывает меню, кроме самого меню
  setTimeout(() => {
    document.addEventListener('click', onDocClick);
  }, 0);
}

function hideMenu() {
  if (menuEl) {
    menuEl.remove();
    menuEl = null;
  }
  if (selectedRow) {
    selectedRow.classList.remove('highlighted-row');
    selectedRow = null;
  }
  document.removeEventListener('click', onDocClick);
}

function onDocClick(e) {
  if (menuEl && !menuEl.contains(e.target)) {
    hideMenu();
  }
}

function addBtn(menu, label, fn) {
  const btn = document.createElement('button');
  btn.textContent = label;
  btn.onclick = async () => {
    await fn();
    hideMenu();
    await reloadTable();
  };
  menu.appendChild(btn);
}

// ============ 6) Действия, вызывающие PHP =============
async function moveUp(idx) {
  await postAction('move_up.php', tableinf[idx]);
}
async function moveDown(idx) {
  await postAction('move_down.php', tableinf[idx]);
}
async function promote(idx) {
  await postAction('promote.php', tableinf[idx]);
}
async function postpone(idx) {
  await postAction('postpone.php', tableinf[idx]);
}
async function finishTask(idx) {
  await postAction('finish.php', tableinf[idx]);
}

async function postAction(endpoint, payload) {
  await fetch(`api/${endpoint}`, {
    method: 'POST',
    headers: {'Content-Type':'application/json'},
    body: JSON.stringify(payload)
  });
}

// ============ 7) Запуск при загрузке страницы ============
document.addEventListener('DOMContentLoaded', reloadTable);
