/* Контейнер меню */
.context-menu {
  background: #fff;
  border: 1px solid #ccc;
  box-shadow: 0 2px 6px rgba(0,0,0,0.2);
  padding: 4px;
  z-index: 10000;
}
/* Кнопки внутри меню */
.context-menu-button {
  display: block;
  width: 100%;
  padding: 4px 8px;
  background: none;
  border: none;
  text-align: left;
  cursor: pointer;
}
.context-menu-button:hover {
  background: #eef;
}
/* Подсветка выбранной строки */
.highlighted-row {
  background: rgba(100,200,255,0.3) !important;
}


// ==================== ГЛОБАЛЬНЫЕ ====================
let tableinf = [];       // сюда кладём данные из get_tasks.php
let selectedRow = null;  // DOM‑узел <tr>, по которому кликнули

// контейнер для контекст‑меню
const menuEl = document.getElementById('menuTd');
if (!menuEl) {
  console.error('Не найден <div id="menuTd"> для контекст‑меню!');
}
menuEl.style.position = 'absolute';
menuEl.style.display  = 'none';
menuEl.className      = 'context-menu';

// ==================== 1) ЗАГРУЗКА ТАБЛИЦЫ ====================
document.addEventListener('DOMContentLoaded', reloadTable);

async function reloadTable() {
  try {
    tableinf = await fetchDataFromServer();
  } catch (err) {
    console.error('Ошибка загрузки данных:', err);
    tableinf = [];
  }
  addRow();
  setupTableClick();
}

// ==================== 2) ФЕТЧ ИЗ PHP ====================
async function fetchDataFromServer() {
  const resp = await fetch('api/get_tasks.php');
  if (!resp.ok) throw new Error(resp.statusText);
  const data = await resp.json();
  // Приведём поля к тому, что ожидает addRow()
  return data.map(item => ({
    id_seq:       item.ID_SEQ,
    datnz:        item.DATNZ,
    nnz:          item.NNZ,
    ocher:        item.OCHER,
    position:     item.POSITION,
    priority:     item.PRIORITY,
    status:       item.STATUS,
    dzag1:        item.DZAG1,
    dzag2:        item.DZAG2,
    kol1p:        item.KOL1P,
    dlot:         item.DLOT,
    marked_count: item.MARKED_COUNT
    // … остальное по необходимости
  }));
}

// ==================== 3) ОТРИСОВКА СТРОК (addRow) ====================
function addRow() {
  const tbody = document.querySelector('#tableTZ0 tbody');
  if (!tbody) {
    console.warn('tbody не найден');
    return;
  }
  tbody.innerHTML = '';

  tableinf.forEach((row, i) => {
    const tr = document.createElement('tr');
    tr.dataset.index    = i;
    tr.dataset.priority = row.priority;
    tr.dataset.status   = row.status;

    // Формируем текст ячеек точно как у вас в старом коде
    const idText     = `${row.datnz} ${row.nnz} ${row.id_seq}`;
    const slabb      = `${row.dzag1}/${row.dzag2}`;
    const needCut    = `${row.kol1p||''}/${row.dlot||''}`;
    const statusText = row.priority == 1 ? 'Распределён' : 'Не распределён';

    const fields = [
      row.position || '',  // позиция
      idText,              // длинная строка
      row.nnmr || '',      // Марка (NNMR)
      slabb,               // Крат: / заготовок
      needCut,             // Нужно/факт
      row.marked_count || '', // Размечено
      statusText           // Статус
    ];

    fields.forEach(txt => {
      const td = document.createElement('td');
      td.textContent = txt;
      tr.appendChild(td);
    });

    tbody.appendChild(tr);
  });
}

// ==================== 4) КЛИК ПО ТАБЛИЦЕ ====================
function setupTableClick() {
  document.removeEventListener('click', tableClick);
  document.addEventListener('click', tableClick);
}

function tableClick(e) {
  const tr = e.target.closest('tr');
  if (tr && tr.parentNode.tagName.toLowerCase() === 'tbody') {
    // кликнули именно по строке таблицы
    if (selectedRow) selectedRow.classList.remove('highlighted-row');
    selectedRow = tr;
    tr.classList.add('highlighted-row');
    // и показываем меню
    showMenu(tr, e.pageX, e.pageY);
  } else {
    hideMenu();
  }
}

// ==================== 5) КОНТЕКСТ‑МЕНЮ ====================
function showMenu(tr, pageX, pageY) {
  hideMenu();  // на всякий
  // получаем нужные данные из строки
  const idx      = +tr.dataset.index;
  const priority = +tr.dataset.priority;
  const status   = +tr.dataset.status;

  // наполняем menuEl
  menuEl.innerHTML = '';
  if (status !== 1) {    // если не «завершено»
    addBtn(menuEl, '↑ Вверх',    () => moveUp(idx));
    addBtn(menuEl, '↓ Вниз',     () => moveDown(idx));
    if (priority === 0) {
      addBtn(menuEl, 'Следующий ▶', () => promote(idx));
    } else {
      addBtn(menuEl, 'Отложить ⏸',  () => postpone(idx));
    }
    addBtn(menuEl, 'Закончить ✖',  () => finishTask(idx));
  }

  // Позиционируем рядом с курсором
  menuEl.style.top     = pageY + 'px';
  menuEl.style.left    = pageX + 'px';
  menuEl.style.display = 'block';

  // клик вне меню скроет его
  setTimeout(()=>{
    document.addEventListener('click', onDocClick);
  },0);
}

function hideMenu() {
  menuEl.style.display = 'none';
  if (selectedRow) {
    selectedRow.classList.remove('highlighted-row');
    selectedRow = null;
  }
  document.removeEventListener('click', onDocClick);
}

function onDocClick(e) {
  if (!menuEl.contains(e.target)) {
    hideMenu();
  }
}

function addBtn(container, label, fn) {
  const btn = document.createElement('button');
  btn.textContent = label;
  btn.className   = 'context-menu-button';
  btn.onclick     = async () => {
    await fn();
    hideMenu();
    await reloadTable();
  };
  container.appendChild(btn);
}

// ==================== 6) ДЕЙСТВИЯ, ВЫЗЫВАЮЩИЕ PHP ====================
async function moveUp(idx) {
  await postAction('move_up.php', tableinf[idx]);
}
async function moveDown(idx) {
  await postAction('move_down.php', tableinf[idx]);
}
async function promote(idx) {
  await postAction('promote.php', tableinf[idx]);
}
async function postpone(idx) {
  await postAction('postpone.php', tableinf[idx]);
}
async function finishTask(idx) {
  await postAction('finish.php', tableinf[idx]);
}

async function postAction(endpoint, payload) {
  await fetch(`api/${endpoint}`, {
    method: 'POST',
    headers:{ 'Content-Type':'application/json' },
    body: JSON.stringify(payload)
  });
}
