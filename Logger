signal_log.txt.

bash
Копировать код
/project
│
├── db_connect.php
├── index.php
├── style.css
├── signal_log.txt      ← (файл создаётся автоматически при первом запуске)
└── api
    ├── log_signal.php
    └── get_signal_log.php
1. /project/db_connect.php
php
Копировать код
<?php
// db_connect.php

// Настройки подключения к Oracle
$connection_string = 'HOST:1521/OPTIM';  // ваш хост:порт/SERVICE_NAME
$username          = 'TS';               // ваше имя пользователя
$password          = 'secret';           // ваш пароль

// Подключаемся, указываем кодировку AL32UTF8 для перекодировки из CL8MSWIN1251 в UTF-8
$conn = oci_connect($username, $password, $connection_string, 'AL32UTF8');
if (!$conn) {
    $e = oci_error();
    exit('Ошибка подключения к БД: ' . htmlspecialchars($e['message']));
}
2. /project/api/log_signal.php
php
Копировать код
<?php
// api/log_signal.php

header('Content-Type: application/json; charset=UTF-8');
ini_set('display_errors',1);
error_reporting(E_ALL);

// 1) Подключаем БД
require __DIR__ . '/../db_connect.php';

// 2) Запрашиваем последнее значение
$sql = "
  SELECT VAL,
         TO_CHAR(DT_SET,'YYYY-MM-DD HH24:MI:SS') AS DT_SET_STR
    FROM T_MNLZ2_SIGNAL
   WHERE ID = 355
     AND DESCR = 'МГР1.Позиция.'
";
$stid = oci_parse($conn, $sql);
oci_execute($stid);
$row = oci_fetch_assoc($stid);
oci_free_statement($stid);
oci_close($conn);

if (!$row) {
    echo json_encode(['error'=>'Нет данных']);
    exit;
}

// 3) Формируем строку лога
$line = sprintf(
  "Дата и время: %s  позиция мгр: %s\n",
  $row['DT_SET_STR'],
  $row['VAL']
);

// 4) Пишем в файл
$logFile = __DIR__ . '/../signal_log.txt';
file_put_contents($logFile, $line, FILE_APPEND | LOCK_EX);

// 5) Отправляем ответ
echo json_encode(['logged' => trim($line)], JSON_UNESCAPED_UNICODE);
3. /project/api/get_signal_log.php
php
Копировать код
<?php
// api/get_signal_log.php

header('Content-Type: application/json; charset=UTF-8');

// Путь к файлу лога
$logFile = __DIR__ . '/../signal_log.txt';
$lines = [];

if (file_exists($logFile)) {
    // Читаем все непустые строки
    $lines = file($logFile, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);
}

echo json_encode($lines, JSON_UNESCAPED_UNICODE);
4. /project/index.php
php
Копировать код
<?php
// index.php
?>
<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8">
  <title>Signal Logger</title>
  <link rel="stylesheet" href="style.css">
</head>
<body>

  <h1>Лог сигнала МГР1.Позиция.</h1>
  <div id="status">Статус: <em>ожидание обновления...</em></div>

  <table id="logTable">
    <thead>
      <tr><th>#</th><th>Запись</th></tr>
    </thead>
    <tbody id="logBody">
      <!-- сюда будут вставляться строки -->
    </tbody>
  </table>

  <script>
  // Функция: загрузить весь лог и отрисовать
  async function loadLog() {
    console.group('loadLog');
    try {
      const resp = await fetch('api/get_signal_log.php');
      const lines = await resp.json();
      console.log('Получены строки лога:', lines);
      const tbody = document.getElementById('logBody');
      tbody.innerHTML = '';
      lines.forEach((line, idx) => {
        const tr = document.createElement('tr');
        tr.innerHTML = `<td>${idx+1}</td><td>${line}</td>`;
        tbody.appendChild(tr);
      });
      document.getElementById('status').textContent = 'Статус: обновлено';
    } catch (e) {
      console.error('Ошибка loadLog:', e);
      document.getElementById('status').textContent = 'Статус: ошибка загрузки';
    }
    console.groupEnd();
  }

  // Функция: запросить логирование и после – обновить таблицу
  async function tick() {
    console.group('tick');
    try {
      console.log('Запрос логирования…');
      const resp = await fetch('api/log_signal.php', { method:'POST' });
      const js = await resp.json();
      console.log('Ответ log_signal:', js);
    } catch (e) {
      console.error('Ошибка log_signal:', e);
    }
    await loadLog();
    console.groupEnd();
  }

  // Инициализация
  document.addEventListener('DOMContentLoaded', () => {
    loadLog();           // сразу подгружаем существующие записи
    setInterval(tick, 5000);  // каждые 5 секунд логируем + обновляем
  });
  </script>

</body>
</html>
5. /project/style.css
css
Копировать код
/* Общие стили */
body {
  font-family: Arial, sans-serif;
  margin: 20px;
}
h1 {
  margin-bottom: 12px;
}
#status {
  margin-bottom: 16px;
  font-style: italic;
  color: #333;
}

/* Таблица лога */
#logTable {
  width: 100%;
  border-collapse: collapse;
}
#logTable th,
#logTable td {
  border: 1px solid #ccc;
  padding: 6px 10px;
}
#logTable thead {
  background: #f0f0f0;
}
#logTable tbody tr:nth-child(even) {
  background: #fafafa;
}
Как проверить
Права на запись: убедитесь, что у веб-сервера есть права на создание и запись в /project/signal_log.txt.

Открыть в браузере: перейдите на http://ваш_домен/project/index.php.

Наблюдать консоль (F12) — там будут выводиться группы loadLog и tick, а в статусе и таблице — актуальные данные.

Теперь при каждой 5-секундной итерации, пока открыта страница, будет опрашиваться БД, логироваться и отображаться в браузере.


<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8">
  <title>Signal Logger</title>
  <link rel="stylesheet" href="style.css">
</head>
<body>

  <h1>Логи сигнала МГР1.Позиция.</h1>
  <div id="status">Статус: <em>ожидание...</em></div>
  <table id="logTable">
    <thead>
      <tr><th>#</th><th>Запись</th></tr>
    </thead>
    <tbody id="logBody">
      <!-- сюда вставляются строки -->
    </tbody>
  </table>

  <script>
  // ============== Функция чтения и отрисовки лога ==============
  async function loadLog() {
    console.group('loadLog');
    console.log('Запрос get_signal_log.php…');
    try {
      const resp = await fetch('api/get_signal_log.php', { method: 'GET' });
      console.log('HTTP статус:', resp.status, resp.statusText);
      const lines = await resp.json();
      console.log('Получили JSON:', lines);

      const tbody = document.getElementById('logBody');
      console.log('Очищаем старые <tbody>');
      tbody.innerHTML = '';

      if (!Array.isArray(lines)) {
        console.warn('Ответ не массив, прекращаем отрисовку');
        document.getElementById('status').textContent = 'Статус: ошибка формата лога';
        console.groupEnd();
        return;
      }

      lines.forEach((line, idx) => {
        const tr = document.createElement('tr');
        tr.innerHTML = `<td>${idx+1}</td><td>${line}</td>`;
        tbody.appendChild(tr);
      });
      console.log(`Отрисовали ${lines.length} строк`);
      document.getElementById('status').textContent = 'Статус: лог обновлён';
    } catch (err) {
      console.error('Ошибка в loadLog():', err);
      document.getElementById('status').textContent = 'Статус: ошибка загрузки лога';
    }
    console.groupEnd();
  }

  // ============== Функция логирования нового значения ==============
  async function logSignal() {
    console.group('logSignal');
    console.log('Запрос log_signal.php…');
    try {
      const resp = await fetch('api/log_signal.php', { method: 'POST' });
      console.log('HTTP статус:', resp.status, resp.statusText);
      const js = await resp.json();
      console.log('Ответ log_signal.php:', js);
      if (js.error) {
        console.warn('API вернул ошибку:', js.error);
      } else {
        console.log('Запись добавлена:', js.logged);
      }
    } catch (err) {
      console.error('Ошибка в logSignal():', err);
    }
    console.groupEnd();
  }

  // ============== Шаг тик ==============
  async function tick() {
    console.group('TICK');
    console.time('tick-duration');
    await logSignal();
    await loadLog();
    console.timeEnd('tick-duration');
    console.groupEnd();
  }

  // ============== Инициализация при загрузке страницы ==============
  document.addEventListener('DOMContentLoaded', () => {
    console.group('Page Loaded');
    console.log('Инициализация логгера');
    loadLog().then(() => console.log('Первоначальная отрисовка лога завершена'));
    // Запускаем каждый 5 секунд
    setInterval(() => {
      console.log('--- setInterval tick ---');
      tick();
    }, 5000);
    console.groupEnd();
  });
  </script>
</body>
</html>









<?php
// api/log_signal.php

header('Content-Type: application/json; charset=UTF-8');
ini_set('display_errors',1);
error_reporting(E_ALL);

// 1) Подключаемся к БД
require __DIR__ . '/../db_connect.php';
if (!$conn) {
    http_response_code(500);
    echo json_encode(['error'=>'DB connect failed']);
    exit;
}

// 2) Простое чтение даты и значения
//    Убедитесь, что схема (TS) указана, если нужно:
$sql = "
  SELECT VAL,
         DT_SET
    FROM TS.T_MNLZ2_SIGNAL
   WHERE ID    = 355
     AND DESCR = 'МГР1.Позиция.'
";
$stid = oci_parse($conn, $sql);
if (!oci_execute($stid)) {
    $e = oci_error($stid);
    http_response_code(500);
    echo json_encode(['error'=>$e['message']]);
    exit;
}

$row = oci_fetch_assoc($stid);
oci_free_statement($stid);
oci_close($conn);

// 3) Если нет строки — возвращаем ошибку
if (!$row) {
    echo json_encode(['error'=>'No data']);
    exit;
}

// 4) Приводим Oracle-дату к нужному формату в PHP
//    $row['DT_SET'] обычно приходит как строка в NLS-формате, например "15-MAI-25"
$phpTimestamp = strtotime($row['DT_SET']);
if ($phpTimestamp === false) {
    // Если strtotime не разобрал, попробуем явно через OCI-Lob или на всякий случай
    $dtRaw = $row['DT_SET'];
    // пробуем вручную: 
    $formatted = $dtRaw; // fallback
} else {
    $formatted = date('Y-m-d H:i:s', $phpTimestamp);
}

// 5) Сохраняем в лог-файл
$line = sprintf(
  "Дата и время: %s  позиция мгр: %s\n",
  $formatted,
  $row['VAL']
);
$logFile = __DIR__ . '/../signal_log.txt';
file_put_contents($logFile, $line, FILE_APPEND | LOCK_EX);

// 6) Отправляем результат клиенту
echo json_encode(['logged' => $line], JSON_UNESCAPED_UNICODE);







ChatGPT может допускать ошибки. Проверьте важную информацию. См. н
