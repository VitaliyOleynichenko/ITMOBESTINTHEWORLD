1. get_tasks.php
Когда вызывается:

При загрузке главной страницы или раздела интерфейса, где отображается список всех задач.

Почему вызывается:

Этот скрипт выполняет операцию "Read All". Он обращается к таблице TS.T_TS_MNLZ2_TASK25, выбирает все записи (с преобразованием даты в формат YYYY-MM-DD для удобства отображения) и возвращает их в формате JSON.

Полученный JSON используется JavaScript‑кодом для построения таблицы или списка задач в интерфейсе.

Как работает:

Устанавливается соединение с базой Oracle.

Выполняется SQL‑запрос, который получает все записи из таблицы и сортирует их (обычно по дате, номеру и идентификатору последовательности).

Результат передаётся в браузер в виде JSON‑массива, который затем отрисовывается в UI.

2. get_task.php
Когда вызывается:

При нажатии на кнопку «Редактировать» или при выборе конкретной задачи для просмотра деталей или редактирования.

Когда необходимо получить полную информацию по одной задаче, идентифицируемой по её ключевым полям (ID_SEQ, DATNZ, NNZ).

Почему вызывается:

Этот скрипт реализует операцию "Read One". Он возвращает данные одной задачи, что позволяет предварительно заполнить форму для редактирования или показать подробности записи.

Как работает:

Принимает входные данные (например, через POST‑запрос, где передаются ключевые параметры).

Выполняется SQL‑запрос с использованием привязанных параметров для поиска единственной записи.

Результат возвращается в виде JSON‑объекта, который затем используется для заполнения формы редактирования в интерфейсе.

3. create_task.php
Когда вызывается:

При нажатии на кнопку «Добавить задачу» в интерфейсе, когда пользователь вводит данные для новой задачи.

Почему вызывается:

Этот скрипт реализует операцию "Create". Он принимает данные новой задачи от клиента, вставляет их в таблицу TS.T_TS_MNLZ2_TASK25 и подтверждает успешное создание записи.

Как работает:

Получает данные (например, в формате JSON) через тело POST‑запроса.

Выполняет SQL‑запрос INSERT, используя привязку параметров для полей (ID_SEQ, DATNZ, NNZ, OCHER).

После выполнения запроса (с коммитом) возвращает JSON‑ответ с результатом операции.

В случае успеха клиентский JS‑код может обновить список задач.

4. update_task.php
Когда вызывается:

При сохранении изменений в задаче, когда пользователь редактирует существующую запись и нажимает кнопку «Сохранить» или «Обновить».

Почему вызывается:

Этот скрипт реализует операцию "Update". Он принимает новые данные для конкретной задачи (определяемой по ключевым полям) и обновляет выбранные поля (например, значение поля OCHER) в таблице.

Как работает:

Получает от клиента JSON‑данные, содержащие ключи для идентификации записи и новые значения для обновления.

Выполняет SQL‑запрос UPDATE, где условием являются ключевые поля (ID_SEQ, DATNZ, NNZ).

Если запрос успешно выполнен, возвращается JSON‑ответ с информацией о количестве обновлённых строк.

Клиентский скрипт (JS‑код) затем обновляет отображение или уведомляет пользователя об успешном обновлении.

5. delete_task.php
Когда вызывается:

При нажатии пользователем на кнопку «Удалить» для конкретной задачи.

Почему вызывается:

Этот скрипт реализует операцию "Delete". Он получает ключевые параметры для идентификации записи и удаляет её из таблицы TS.T_TS_MNLZ2_TASK25.

Как работает:

Получает входные данные (например, id_seq, datnz, nnz) через POST‑запрос.

Выполняет SQL‑запрос DELETE с условием по ключевым полям.

После успешного удаления (и коммита) возвращает JSON‑ответ с информацией о количестве удалённых строк.

Клиентский JS‑код обновляет список задач, удаляя удалённую запись из интерфейса.

6. get_last.php
Когда вызывается:

При необходимости узнать, какая запись считается «последней» (LastRecord) для процедуры загрузки задач.

Например, если интерфейс должен отобразить текущую последнюю обработанную задачу или для отладки.

Почему вызывается:

Этот скрипт извлекает данные из таблицы TS.T_TS_MNLZ2_LASTRECORD — там хранится только одна запись, которая представляет последнюю добавленную задачу.

Это может понадобиться для определения, с какого момента начинать загрузку новых задач или для отображения информации в интерфейсе.

Как работает:

Выполняется SQL‑запрос SELECT, который возвращает единственную запись.

Результат преобразуется в JSON‑объект и отправляется клиенту.

7. set_last.php
Когда вызывается:

Если по какой‑либо причине требуется вручную обновить или сбросить информацию о «последней» записи.

Например, если после выполнения определённой операции интерфейс должен зафиксировать новую «последнюю» задачу.

Почему вызывается:

Этот скрипт сначала очищает таблицу TS.T_TS_MNLZ2_LASTRECORD (удаляет все записи), а затем вставляет новую запись, которая становится актуальной последней.

Это гарантирует, что в таблице всегда хранится только одна актуальная запись.

Как работает:

Получает данные для новой последней записи через POST‑запрос.

Сначала выполняется DELETE для очистки таблицы.

Затем выполняется INSERT для вставки новой записи.

Возвращается JSON‑ответ, подтверждающий успешное выполнение операции.

Общая схема вызова из JavaScript
В интерфейсе (например, в файле app.js) используются вызовы через fetch(), где:

loadTasks() — при загрузке страницы или по кнопке обновления вызывается get_tasks.php, чтобы отобразить все задачи.

loadTask() — при выборе конкретной задачи для редактирования вызывается get_task.php с передачей ключевых параметров.

createTask() — при добавлении новой задачи вызывается create_task.php с данными новой записи.

updateTask() — при сохранении изменений вызывается update_task.php.

deleteTask() — при удалении задачи вызывается delete_task.php.

Дополнительно, для работы с информацией о последней записи используются get_last.php и set_last.php.
