/**
 * Создаёт DOM-элемент одной заготовки («primSlab»),
 * раскладывая в него нужное число внутренних «secSlab».
 *
 * @param {{ id: string
 *         , queue: number|null
 *         , length: number    – длина заготовки (используется для ширины)
 *         , krat: number      – число «краток» (количество внутренних блоков)
 *         , kratLen: number   – длина «кратки» (не используется здесь)
 *         , numberPlav: number
 *         }} slabData
 * @return {HTMLElement}
 */
function createSlabElement(slabData) {
  // 1) Основной контейнер
  const primSlab = document.createElement('div');
  primSlab.classList.add('primSlab');
  primSlab.id = `${slabData.numberPlav}-${slabData.queue || '_'}-${slabData.id}`;

  // 2) Ширина пропорциональна реальной длине slabData.length
  //    Здесь 23 — ваш «коэффициент масштабирования» (как было раньше)
  const px = slabData.length / 23;
  primSlab.style.width = `${px}px`;

  // 3) Внутренние «krat» блоки: secSlab
  for (let i = 0; i < slabData.krat; i++) {
    const secSlab = document.createElement('div');
    secSlab.className = 'secSlab';
    secSlab.id = `${slabData.numberPlav}-${slabData.queue || '_'}-part${i+1}`;
    // равномерное деление ширины primSlab
    secSlab.style.width = `${100 / slabData.krat}%`;
    primSlab.appendChild(secSlab);
  }

  return primSlab;
}


/**
 * Отрисовывает «ручей» — последовательность primSlab внутри контейнера #Ruchej.
 * Принимает на вход результат createData().
 *
 * @param {Array<{id:string, queue:number|null, length:number, krat:number, numberPlav:number}>} dataArray
 */
function paintRuchej(dataArray) {
  console.groupCollapsed('▶ paintRuchej');

  const ruchej = document.getElementById('Ruchej');
  const pNew   = document.getElementById('p_new');
  if (!ruchej || !pNew) {
    console.error('Не найдены элементы #Ruchej или #p_new в DOM');
    console.groupEnd();
    return;
  }

  // 1) Удаляем старые
  ruchej.querySelectorAll('.primSlab').forEach(el => el.remove());

  // 2) Если нечего рисовать
  if (!dataArray || dataArray.length === 0) {
    console.log('Нет данных для отрисовки.');
    console.groupEnd();
    return;
  }

  // 3) Первую заготовку (p_new) масштабируем по её length
  const first = dataArray[0];
  const firstWidth = first.length / 23;
  pNew.style.width = `${firstWidth}px`;
  console.log(`Установили ширину p_new = ${first.length} -> ${firstWidth}px`);

  // 4) Добавляем остальные заготовки
  for (let i = 1; i < dataArray.length; i++) {
    const slab = dataArray[i];
    console.log(`Добавляем slab ${i}: id=${slab.id}, length=${slab.length}, krat=${slab.krat}`);
    const dom = createSlabElement(slab);
    ruchej.appendChild(dom);
  }

  console.groupEnd();
}
