/**
 * 1) Формируем массив заготовок для ручья 
 *    на основании текущей длины ручья (dataRuchej.rych)
 *    и параметров каждого заказа из tableInf.
 *    Возвращаем новый массив dataRuchej (список объектов {id, queue, length, krat, ...}).
 */
function createData() {
  console.groupCollapsed('▶ createData START');

  // --- 1) Сохраняем оригинальные remaining, чтобы потом восстановить ---
  const originalRemaining = tableInf.map(o => o.remaining);
  console.log('originalRemaining:', originalRemaining);

  // --- 2) Нормализуем поля для каждого заказа ---
  tableInf.forEach((o, idx) => {
    o.need      = Number(o.KOL1P       ?? o.kol1p)      || 0;  // всего нужно
    o.cut       = Number(o.CUT_COUNT   ?? o.cut_count)  || 0;  // уже отрезано
    o.marked    = Number(o.MARKED_COUNT?? o.marked_count)|| 0;  // уже размечено
    o.slabLen   = Number(o.DZAG1       ?? o.dzag1)      || 0;  // длина одной заготовки
    o.kratCount = Number(o.KRAT        ?? o.krat)        || 0;  // сколько заготовок в одном «крате»
    o.queue     = o.POSITION          ?? o.position     ?? null; // очередь/позиция
    o.remaining = o.need - o.cut - o.marked;                   // сколько осталось размечать

    console.log(
      `Order[${idx}] ID_SEQ=${o.ID_SEQ||o.id_seq}:`,
      `{ need:${o.need}, cut:${o.cut}, marked:${o.marked}, slabLen:${o.slabLen}, kratCount:${o.kratCount}, remaining:${o.remaining}, queue:${o.queue} }`
    );
  });

  // --- 3) Берём длину ручья ---
  let riverLen = Number(dataRuchej.rych) || 0;
  console.log('Initial riverLen:', riverLen);

  // --- 4) Генерируем слэбы, пока riverLen > 0 ---
  const slabRuchejArray = [];

  for (let order of tableInf) {
    if (riverLen <= 0) break;

    // 4.1) Если оставшийся riverLen меньше, чем slabLen, но больше 0 — один «частичный» слэб
    if (riverLen > 0 && riverLen < order.slabLen) {
      slabRuchejArray.unshift({
        id:       'p_new',
        queue:    null,
        length:   riverLen,
        krat:     0,
        numberPlav: dataRuchej.numberPlav
      });
      console.log(`Partial slab p_new length=${riverLen}`);
      riverLen = 0;
      break;
    }

    // 4.2) Пока хватает целой заготовки и она ещё не размечена полностью
    while (riverLen >= order.slabLen && order.remaining > 0) {
      slabRuchejArray.unshift({
        id:        order.ID_SEQ    ?? order.id_seq,
        queue:     order.queue,
        length:    order.slabLen,
        krat:      order.kratCount,
        numberPlav: dataRuchej.numberPlav
      });
      riverLen   -= order.slabLen;
      order.remaining--;
      console.log(
        `Added slab for order ${order.ID_SEQ||order.id_seq}, ` +
        `remaining=${order.remaining}, riverLen=${riverLen}`
      );
    }
  }

  // 4.3) Если после всех заказов остался «хвостик» ручья
  if (riverLen > 0) {
    slabRuchejArray.unshift({
      id:        'p_new',
      queue:     null,
      length:    riverLen,
      krat:      0,
      numberPlav: dataRuchej.numberPlav
    });
    console.log(`Final partial slab p_new length=${riverLen}`);
  }

  // --- 5) Восстанавливаем оригинальные remaining ---
  tableInf.forEach((o, i) => o.remaining = originalRemaining[i]);
  console.log('Restored remaining:', tableInf.map(o => o.remaining));

  // --- 6) Итоговый лог и возврат ---
  console.log(`▶ createData END — total slabs=${slabRuchejArray.length}`);
  console.log('Resulting slabRuchejArray:', slabRuchejArray);
  console.groupEnd();

  dataRuchej = slabRuchejArray;
  return dataRuchej;
}
