function markedCount(dataRuchej, tableinf) {
  console.log("=== Начало выполнения функции markedCount ===");

  // Подсчитываем количество встреч для каждого id из dataRuchej (ограничение до 100 итераций)
  const counts = {};
  console.log("Начинаем подсчет количества объектов по id в dataRuchej");
  for (let i = 0; i < dataRuchej.length; i++) {
    if (i >= 100) {
      console.log(`Прерывание цикла dataRuchej: достигнуто 100 итераций (итерация ${i}).`);
      break;
    } else if (i < 100) {
      const currentId = dataRuchej[i].id;
      counts[currentId] = (counts[currentId] || 0) + 1;
      console.log(`dataRuchej[${i}]: id = ${currentId}, текущее количество = ${counts[currentId]}`);
    }
  }
  console.log("Подсчет завершен. Результирующий объект counts:", counts);

  // Обновляем данные в tableinf только для тех записей, id которых присутствуют в counts.
  // Собираем объект обновлений, где ключ – id, а значение – обновленное поле marked.
  const updates = {};
  console.log("Начинаем обновление данных в tableinf для найденных id");
  for (let i = 0; i < tableinf.length; i++) {
    if (i >= 100) {
      console.log(`Прерывание цикла tableinf: достигнуто 100 итераций (итерация ${i}).`);
      break;
    } else if (i < 100) {
      const currentId = tableinf[i].id;
      if (counts.hasOwnProperty(currentId)) {
        tableinf[i].marked = counts[currentId];
        updates[currentId] = counts[currentId];
        console.log(`tableinf[${i}]: id = ${currentId} обновлен: marked = ${counts[currentId]}`);
      } else {
        console.log(`tableinf[${i}]: id = ${currentId} не найден в counts, поле marked не обновлено.`);
      }
    }
  }
  console.log("Обновление завершено. Собранные данные для передачи на сервер:", updates);

  // Передаем только обновленные данные по id на сервер
  console.log("Передача обновленных данных на сервер для указанных id...");
  updateDataOnServer(updates);
  console.log("Данные успешно переданы на сервер.");

  console.log("=== Завершение выполнения функции markedCount ===");
}
