Спецификация пакета

CREATE OR REPLACE PACKAGE TS.PKG_TS_MNLZ2_TASK AS
  PROCEDURE LOAD_TASKS;
END PKG_TS_MNLZ2_TASK;
/

Тело пакета

CREATE OR REPLACE PACKAGE BODY TS.PKG_TS_MNLZ2_TASK AS

  PROCEDURE LOAD_TASKS IS
    ----------------------------------------------------------------------------
    -- Локальные переменные
    ----------------------------------------------------------------------------
    v_current_count  NUMBER;         -- сколько записей сейчас в TS.T_TS_MNLZ2_TASK25
    v_needed         NUMBER;         -- сколько нужно добавить, чтобы довести до 25
    v_inserted       NUMBER := 0;    -- сколько фактически добавили

    ----------------------------------------------------------------------------
    -- Переменные для "последней" записи (идентифицируемой по ID_SEQ, DATNZ, NNZ)
    ----------------------------------------------------------------------------
    v_last_id_seq    TS.V_TS_MNLZ2_TASK.ID_SEQ%TYPE;
    v_last_datnz     TS.V_TS_MNLZ2_TASK.DATNZ%TYPE;
    v_last_nnz       TS.V_TS_MNLZ2_TASK.NNZ%TYPE;
    v_found_last     BOOLEAN := FALSE;  -- найден ли в курсоре последний добавленный элемент

    ----------------------------------------------------------------------------
    -- Курсор для выборки данных из TS.V_TS_MNLZ2_TASK
    ----------------------------------------------------------------------------
    CURSOR c_source IS
      SELECT 
             ID_SEQ,
             DATNZ,
             NNZ,
             OCHER
        FROM TS.V_TS_MNLZ2_TASK
       WHERE DATNZ >= SYSDATE-1
       ORDER BY DATNZ, NNZ, OCHER, ID_SEQ;
    c_source_rec c_source%ROWTYPE;
    
  BEGIN
    ----------------------------------------------------------------------------
    -- 1) Определяем количество записей в TS.T_TS_MNLZ2_TASK25
    ----------------------------------------------------------------------------
    SELECT COUNT(*) INTO v_current_count
      FROM TS.T_TS_MNLZ2_TASK25;
    
    IF v_current_count >= 20 THEN
      DBMS_OUTPUT.PUT_LINE('Записей уже 20 и более, добавлять новые не нужно.');
      RETURN;
    ELSE
      v_needed := 25 - v_current_count;
    END IF;
    
    ----------------------------------------------------------------------------
    -- 2) Считываем "последнюю" добавленную запись из TS.T_TS_MNLZ2_LASTRECORD
    ----------------------------------------------------------------------------
    BEGIN
      SELECT ID_SEQ,
             DATNZ,
             NNZ
        INTO v_last_id_seq,
             v_last_datnz,
             v_last_nnz
        FROM TS.T_TS_MNLZ2_LASTRECORD
       WHERE ROWNUM = 1;  -- предполагаем, что там хранится единственная запись
      v_found_last := FALSE; -- ещё не нашли эту запись в курсоре
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        -- Если таблица TS.T_TS_MNLZ2_LASTRECORD пуста, начинаем с начала
        v_last_id_seq := NULL;
        v_last_datnz  := NULL;
        v_last_nnz    := NULL;
        v_found_last  := TRUE;  -- нет предыдущей записи – начинаем вставку с начала
    END;
    
    ----------------------------------------------------------------------------
    -- 3) Обрабатываем записи из TS.V_TS_MNLZ2_TASK курсором
    ----------------------------------------------------------------------------
    OPEN c_source;
    LOOP
      FETCH c_source INTO c_source_rec;
      EXIT WHEN c_source%NOTFOUND;
      
      ----------------------------------------------------------------------------
      -- Если предыдущая (последняя) запись ещё не найдена и она существует,
      -- пропускаем строки до её обнаружения
      ----------------------------------------------------------------------------
      IF NOT v_found_last AND v_last_id_seq IS NOT NULL THEN
        IF    c_source_rec.ID_SEQ = v_last_id_seq
           AND c_source_rec.DATNZ  = v_last_datnz
           AND c_source_rec.NNZ    = v_last_nnz
        THEN
          v_found_last := TRUE;
          CONTINUE;  -- следующая строка станет первой кандидатной для вставки
        ELSE
          CONTINUE;
        END IF;
      END IF;
      
      ----------------------------------------------------------------------------
      -- 4) Проверяем, нет ли уже дубликата в TS.T_TS_MNLZ2_TASK25
      ----------------------------------------------------------------------------
      DECLARE
        v_dup_count NUMBER;
      BEGIN
        SELECT COUNT(*) INTO v_dup_count
          FROM TS.T_TS_MNLZ2_TASK25
         WHERE ID_SEQ = c_source_rec.ID_SEQ
           AND DATNZ  = c_source_rec.DATNZ
           AND NNZ    = c_source_rec.NNZ;
           
        IF v_dup_count = 0 THEN
          ----------------------------------------------------------------------------
          -- 5) Вставляем запись в TS.T_TS_MNLZ2_TASK25
          ----------------------------------------------------------------------------
          INSERT INTO TS.T_TS_MNLZ2_TASK25 (ID_SEQ, DATNZ, NNZ, OCHER)
          VALUES (c_source_rec.ID_SEQ,
                  c_source_rec.DATNZ,
                  c_source_rec.NNZ,
                  c_source_rec.OCHER);
          
          v_inserted := v_inserted + 1;
          
          -- Обновляем данные последней записи
          v_last_id_seq := c_source_rec.ID_SEQ;
          v_last_datnz  := c_source_rec.DATNZ;
          v_last_nnz    := c_source_rec.NNZ;
          
          IF v_inserted >= v_needed THEN
            EXIT;
          END IF;
        END IF;
      END;
      
    END LOOP;
    CLOSE c_source;
    
    ----------------------------------------------------------------------------
    -- 6) Если были добавлены записи, обновляем (или вставляем) запись в TS.T_TS_MNLZ2_LASTRECORD
    ----------------------------------------------------------------------------
    IF v_inserted > 0 THEN
      -- Пытаемся обновить существующую запись
      UPDATE TS.T_TS_MNLZ2_LASTRECORD
         SET DATNZ = v_last_datnz
       WHERE ID_SEQ = v_last_id_seq
         AND NNZ    = v_last_nnz;
      
      IF SQL%ROWCOUNT = 0 THEN
        -- Если записи нет, вставляем новую
        INSERT INTO TS.T_TS_MNLZ2_LASTRECORD (ID_SEQ, DATNZ, NNZ)
        VALUES (v_last_id_seq, v_last_datnz, v_last_nnz);
      END IF;
      
      DBMS_OUTPUT.PUT_LINE('Добавлено ' || v_inserted || ' записей.');
    ELSE
      DBMS_OUTPUT.PUT_LINE('Новых уникальных записей не найдено.');
    END IF;
    
  END LOAD_TASKS;

END PKG_TS_MNLZ2_TASK;
/



CREATE OR REPLACE PACKAGE BODY TS.PKG_TS_MNLZ2_TASK AS

  -- Процедура, которая загружает записи из представления в целевую таблицу,
  -- если в целевой таблице записей меньше 20, добавляя их до общего числа 25.
  PROCEDURE LOAD_TASKS IS
  
    ----------------------------------------------------------------------------
    -- Локальные переменные
    ----------------------------------------------------------------------------
    v_current_count  NUMBER;         -- Количество записей, уже находящихся в TS.T_TS_MNLZ2_TASK25.
    v_needed         NUMBER;         -- Количество записей, которые нужно добавить, чтобы общее число стало 25.
    v_inserted       NUMBER := 0;    -- Счётчик реально вставленных записей в ходе выполнения процедуры.

    ----------------------------------------------------------------------------
    -- Переменные для хранения информации о "последней" записи.
    -- Запись идентифицируется по трём полям: ID_SEQ, DATNZ, NNZ.
    ----------------------------------------------------------------------------
    v_last_id_seq    TS.V_TS_MNLZ2_TASK.ID_SEQ%TYPE;  -- Значение поля ID_SEQ последней добавленной записи.
    v_last_datnz     TS.V_TS_MNLZ2_TASK.DATNZ%TYPE;     -- Значение поля DATNZ последней добавленной записи.
    v_last_nnz       TS.V_TS_MNLZ2_TASK.NNZ%TYPE;       -- Значение поля NNZ последней добавленной записи.
    v_found_last     BOOLEAN := FALSE;  -- Флаг, указывающий, что в выборке курсора найден элемент, совпадающий с последней записью.

    ----------------------------------------------------------------------------
    -- Курсор для выборки данных из представления TS.V_TS_MNLZ2_TASK.
    -- Здесь выбираются записи с датой DATNZ, не меньше SYSDATE-1, с нужной сортировкой.
    ----------------------------------------------------------------------------
    CURSOR c_source IS
      SELECT 
             ID_SEQ,      -- Идентификатор последовательности.
             DATNZ,       -- Дата (заданная в представлении).
             NNZ,         -- Номер (заданное поле).
             OCHER        -- Дополнительное поле, например, обозначающее очередь.
        FROM TS.V_TS_MNLZ2_TASK
       WHERE DATNZ >= SYSDATE-1  -- Фильтр: выбираем записи, начиная с даты SYSDATE-1.
       ORDER BY DATNZ, NNZ, OCHER, ID_SEQ;  -- Сортировка записей по этим полям для последовательного перебора.
       
    c_source_rec c_source%ROWTYPE;  -- Переменная, которая будет хранить текущую строку, полученную из курсора.
    
  BEGIN
    ----------------------------------------------------------------------------
    -- 1) Определяем количество записей, уже находящихся в целевой таблице TS.T_TS_MNLZ2_TASK25.
    ----------------------------------------------------------------------------
    SELECT COUNT(*) INTO v_current_count
      FROM TS.T_TS_MNLZ2_TASK25;
      
    -- Если записей 20 и более, процедура завершается (не требуется добавление новых).
    IF v_current_count >= 20 THEN
      DBMS_OUTPUT.PUT_LINE('Записей уже 20 и более, добавлять новые не нужно.');
      RETURN;
    ELSE
      -- Иначе вычисляем, сколько ещё нужно добавить, чтобы общее число стало 25.
      v_needed := 25 - v_current_count;
    END IF;
    
    ----------------------------------------------------------------------------
    -- 2) Считываем "последнюю" добавленную запись из таблицы TS.T_TS_MNLZ2_LASTRECORD.
    ----------------------------------------------------------------------------
    BEGIN
      SELECT ID_SEQ,
             DATNZ,
             NNZ
        INTO v_last_id_seq,
             v_last_datnz,
             v_last_nnz
        FROM TS.T_TS_MNLZ2_LASTRECORD
       WHERE ROWNUM = 1;  -- Предполагается, что таблица содержит единственную запись для последней записи.
      -- Если запись найдена, флаг v_found_last остаётся FALSE – мы должны найти её в курсоре.
      v_found_last := FALSE;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        -- Если в таблице TS.T_TS_MNLZ2_LASTRECORD нет записей, начинаем вставку с начала выборки.
        v_last_id_seq := NULL;
        v_last_datnz  := NULL;
        v_last_nnz    := NULL;
        v_found_last  := TRUE;  -- Флаг выставляется в TRUE, чтобы сразу начинать вставку.
    END;
    
    ----------------------------------------------------------------------------
    -- 3) Открываем курсор и перебираем записи из представления TS.V_TS_MNLZ2_TASK.
    ----------------------------------------------------------------------------
    OPEN c_source;
    LOOP
      FETCH c_source INTO c_source_rec;
      EXIT WHEN c_source%NOTFOUND;  -- Выходим из цикла, когда все записи перебраны.
      
      ----------------------------------------------------------------------------
      -- Если последняя запись ещё не найдена (v_found_last = FALSE) и у нас есть значение для сравнения,
      -- проверяем, совпадает ли текущая запись с "последней" (по ID_SEQ, DATNZ, NNZ).
      ----------------------------------------------------------------------------
      IF NOT v_found_last AND v_last_id_seq IS NOT NULL THEN
        IF    c_source_rec.ID_SEQ = v_last_id_seq
           AND c_source_rec.DATNZ  = v_last_datnz
           AND c_source_rec.NNZ    = v_last_nnz
        THEN
          -- Нашли запись, совпадающую с последней. С этого момента начинаем вставку следующих записей.
          v_found_last := TRUE;
          CONTINUE;  -- Переходим к следующей итерации цикла.
        ELSE
          -- Пока не нашли, продолжаем перебор без вставки.
          CONTINUE;
        END IF;
      END IF;
      
      ----------------------------------------------------------------------------
      -- 4) Проверяем, нет ли уже дубликата в целевой таблице TS.T_TS_MNLZ2_TASK25 по ключевым полям.
      ----------------------------------------------------------------------------
      DECLARE
        v_dup_count NUMBER;
      BEGIN
        SELECT COUNT(*) INTO v_dup_count
          FROM TS.T_TS_MNLZ2_TASK25
         WHERE ID_SEQ = c_source_rec.ID_SEQ
           AND DATNZ  = c_source_rec.DATNZ
           AND NNZ    = c_source_rec.NNZ;
           
        IF v_dup_count = 0 THEN
          ----------------------------------------------------------------------------
          -- 5) Если дубликата нет, вставляем запись в таблицу TS.T_TS_MNLZ2_TASK25.
          ----------------------------------------------------------------------------
          INSERT INTO TS.T_TS_MNLZ2_TASK25 (ID_SEQ, DATNZ, NNZ, OCHER)
          VALUES (c_source_rec.ID_SEQ,
                  c_source_rec.DATNZ,
                  c_source_rec.NNZ,
                  c_source_rec.OCHER);
          
          -- Увеличиваем счётчик вставленных записей.
          v_inserted := v_inserted + 1;
          
          -- Обновляем переменные последней записи значениями только что вставленной строки.
          v_last_id_seq := c_source_rec.ID_SEQ;
          v_last_datnz  := c_source_rec.DATNZ;
          v_last_nnz    := c_source_rec.NNZ;
          
          -- Если вставлено необходимое количество записей, выходим из цикла.
          IF v_inserted >= v_needed THEN
            EXIT;
          END IF;
        END IF;
      END;
      
    END LOOP;
    CLOSE c_source;
    
    ----------------------------------------------------------------------------
    -- 6) Если были добавлены новые записи, обновляем или вставляем информацию о последней записи
    --    в таблицу TS.T_TS_MNLZ2_LASTRECORD.
    ----------------------------------------------------------------------------
    IF v_inserted > 0 THEN
      -- Пытаемся обновить запись, если она уже существует (по ключу: ID_SEQ и NNZ).
      UPDATE TS.T_TS_MNLZ2_LASTRECORD
         SET DATNZ = v_last_datnz
       WHERE ID_SEQ = v_last_id_seq
         AND NNZ    = v_last_nnz;
      
      -- Если обновление не затронуло ни одной строки (то есть записи нет), вставляем новую запись.
      IF SQL%ROWCOUNT = 0 THEN
        INSERT INTO TS.T_TS_MNLZ2_LASTRECORD (ID_SEQ, DATNZ, NNZ)
        VALUES (v_last_id_seq, v_last_datnz, v_last_nnz);
      END IF;
      
      DBMS_OUTPUT.PUT_LINE('Добавлено ' || v_inserted || ' записей.');
    ELSE
      DBMS_OUTPUT.PUT_LINE('Новых уникальных записей не найдено.');
    END IF;
    
  END LOAD_TASKS;

END PKG_TS_MNLZ2_TASK;
/






CREATE OR REPLACE PACKAGE TS.PKG_TRIGGER_FLAG AS
  -- Глобальная переменная-флаг, используемая для предотвращения рекурсивного вызова
  g_in_trigger BOOLEAN := FALSE;
END PKG_TRIGGER_FLAG;
/
Пояснение:
g_in_trigger: Эта переменная инициализируется значением FALSE. При входе в триггер, перед вызовом процедуры, она устанавливается в TRUE для предотвращения повторного срабатывания триггера, если процедура вставляет новые записи. После завершения процедуры флаг сбрасывается обратно в FALSE.

Этот пакет должен быть создан в схеме TS перед использованием триггера, который ссылается на него.





CREATE OR REPLACE TRIGGER TS.TRG_TASK25_DML
AFTER INSERT OR DELETE ON TS.T_TS_MNLZ2_TASK25
DECLARE
  v_total NUMBER;  -- переменная для хранения общего количества записей в целевой таблице
BEGIN
  ----------------------------------------------------------------------------
  -- Подсчитываем общее количество записей в таблице TS.T_TS_MNLZ2_TASK25
  ----------------------------------------------------------------------------
  SELECT COUNT(*) INTO v_total FROM TS.T_TS_MNLZ2_TASK25;
  
  ----------------------------------------------------------------------------
  -- Если записей меньше 20 и флаг триггера не установлен, вызываем процедуру загрузки
  ----------------------------------------------------------------------------
  IF v_total < 20 AND NOT TS.PKG_TRIGGER_FLAG.g_in_trigger THEN
    -- Устанавливаем флаг, чтобы избежать рекурсивного срабатывания триггера
    TS.PKG_TRIGGER_FLAG.g_in_trigger := TRUE;
    
    -- Вызываем процедуру, которая добирает записи до 25
    TS.PKG_TS_MNLZ2_TASK.LOAD_TASKS;
    
    -- Сбрасываем флаг после выполнения процедуры
    TS.PKG_TRIGGER_FLAG.g_in_trigger := FALSE;
  END IF;
  
EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Ошибка в триггере TS.TRG_TASK25_DML: ' || SQLERRM);
END;
/
Пошаговое объяснение кода:
CREATE OR REPLACE TRIGGER TS.TRG_TASK25_DML
Создаётся триггер в схеме TS с именем TRG_TASK25_DML, который будет срабатывать после операций INSERT или DELETE на таблице TS.T_TS_MNLZ2_TASK25.

DECLARE v_total NUMBER;
Объявляем переменную для подсчёта количества записей в таблице.

SELECT COUNT(*) INTO v_total FROM TS.T_TS_MNLZ2_TASK25;
Выполняем запрос, который определяет общее число записей в целевой таблице.

IF v_total < 20 AND NOT TS.PKG_TRIGGER_FLAG.g_in_trigger THEN
Если количество записей меньше 20 и флаг (предотвращающий рекурсивный вызов) не установлен, то переходим к вызову процедуры.

TS.PKG_TRIGGER_FLAG.g_in_trigger := TRUE;
Устанавливаем флаг, чтобы избежать повторного срабатывания триггера (например, если в процедуре LOAD_TASKS происходят вставки).

TS.PKG_TS_MNLZ2_TASK.LOAD_TASKS;
Вызываем процедуру загрузки задач, которая добирает записи до 25.

TS.PKG_TRIGGER_FLAG.g_in_trigger := FALSE;
Сбрасываем флаг после выполнения процедуры.

EXCEPTION ...
В случае возникновения ошибки выводится сообщение об ошибке с помощью DBMS_OUTPUT.





