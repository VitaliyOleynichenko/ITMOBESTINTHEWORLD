/**
 * 1) Формируем массив заготовок для ручья 
 *    на основании текущей длины ручья (dataRuchej.rych)
 *    и параметров каждого заказа из tableInf.
 *    Возвращаем новый массив dataRuchej.
 */
function createData() {
  // 1.1. Сохраняем оригинальные остатки, чтобы потом их восстановить
  const originalRemaining = tableInf.map(o => o.remaining);

  // 1.2. Составляем локальные поля у каждого заказа:
  tableInf.forEach(o => {
    // сколько всего нужно заготовок
    o.need     = Number(o.KOL1P)  || 0;
    // сколько уже «нарезано» (факт)
    o.cut      = Number(o.DLOT)   || 0;
    // сколько уже «размечено» (предыдущее значение)
    o.marked   = Number(o.marked_count) || 0;
    // длина одной заготовки
    o.slabLen  = Number(o.SHOT)   || 0;
    // кратность (сколько заготовок в одном «пачечной» резке)
    o.kratLen  = Number(o.KRAT)   || 0;
    // остаток, который ещё нужно разметить
    o.remaining = o.need - o.cut - o.marked;
  });

  // 1.3. Текущая длина ручья
  let riverLen = Number(dataRuchej.rych) || 0;

  // 1.4. Генерируем массив заготовок slabs
  const slabRuchejArray = [];
  for (let order of tableInf) {
    // если ручей короче одной заготовки — вставляем «частичный»
    if (riverLen > 0 && riverLen < order.slabLen) {
      slabRuchejArray.unshift({
        id:       'p_new',                // спец-метка
        krat:     0,
        queue:    null,
        length:   riverLen,
        kratLen:  0,
        number:   dataRuchej.numberPlav   // номер плавки
      });
      break;
    }

    // пока в текущем заказе ещё можно «впихнуть» целую заготовку
    while (riverLen >= order.slabLen && order.remaining > 0) {
      slabRuchejArray.unshift({
        id:      order.ID_SEQ,
        krat:    order.kratLen,
        queue:   order.POSITION,
        length:  order.slabLen,
        kratLen: order.kratLen,
        number:  dataRuchej.numberPlav
      });
      riverLen -= order.slabLen;
      order.remaining--;
    }

    // если после этого остался ещё кусок ручья, меньше чем slabLen
    if (riverLen > 0 && order.remaining >= 0) {
      slabRuchejArray.unshift({
        id:       'p_new',
        krat:     0,
        queue:    null,
        length:   riverLen,
        kratLen:  0,
        number:   dataRuchej.numberPlav
      });
      break;
    }
  }

  // 1.5. Восстанавливаем оригинальные остатки в tableInf
  tableInf.forEach((o,i) => {
    o.remaining = originalRemaining[i];
  });

  // 1.6. Обновлённый массив ручья
  dataRuchej = slabRuchejArray;
  return dataRuchej;
}


/**
 * 2) Считаем, сколько заготовок из dataRuchej «принадлежит» каждому заказу,
 *    и пишем это в tableInf[i].marked_count
 */
function markedCount(dataRuchej) {
  // 2.1. Собираем счётчики по ID_SEQ
  const counts = {};
  for (let slab of dataRuchej) {
    if (slab.id === 'p_new') continue;
    counts[slab.id] = (counts[slab.id] || 0) + 1;
  }

  // 2.2. Обновляем tableInf
  tableInf.forEach(o => {
    const id = o.ID_SEQ;
    if (counts[id]) {
      o.marked_count = counts[id];
    } else {
      o.marked_count = 0;
    }
    // при желании можно здесь же обновить остаток:
    // o.remaining = o.need - o.cut - o.marked_count;
  });
}





/**
 * Класс одной «заготовки» ручья
 */
class SlabRuchej {
  /**
   * @param {string|number} id         — идентификатор заказа (ID_SEQ) или 'p_new'
   * @param {number|null}   queue      — позиция/очередь (FIELD POSITION) или null
   * @param {number}        length     — длина сегмента ручья (SHOT)
   * @param {number}        kratCount  — кратность (KRAT)
   * @param {string|number} numberPlav — номер плавки
   */
  constructor(id, queue, length, kratCount, numberPlav) {
    this.id         = id;          // ID_SEQ заказа или 'p_new'
    this.queue      = queue;       // позиция в очереди (null для «остаточных»)
    this.length     = length;      // длина этого куска ручья
    this.kratCount  = kratCount;   // кратность (сколько заготовок в этом куске)
    this.numberPlav = numberPlav;  // номер плавки
  }
}














/**
 * 1) Формируем массив заготовок для ручья
 *    на основании текущей длины ручья (dataRuchej.rych)
 *    и параметров каждого заказа из tableInf.
 *    Возвращаем новый массив dataRuchej.
 */
function createData() {
  console.groupCollapsed('%ccreateData START', 'color: navy; font-weight: bold;');

  // 1.1. Сохраняем оригинальные остатки
  const originalRemaining = tableInf.map(o => o.remaining);
  console.log('1.1 originalRemaining:', originalRemaining);

  // 1.2. Подготовка полей у каждого заказа
  tableInf.forEach((o, idx) => {
    console.group(`Заказ ${idx} (ID_SEQ=${o.ID_SEQ}) до подготовки`);
    console.log('исходный o:', JSON.parse(JSON.stringify(o)));

    o.need      = Number(o.KOL1P)        || 0;
    o.cut       = Number(o.DLOT)         || 0;
    o.marked    = Number(o.marked_count) || 0;
    o.slabLen   = Number(o.SHOT)         || 0;
    o.kratLen   = Number(o.KRAT)         || 0;
    o.remaining = o.need - o.cut - o.marked;

    console.log('o.need      =', o.need);
    console.log('o.cut       =', o.cut);
    console.log('o.marked    =', o.marked);
    console.log('o.slabLen   =', o.slabLen);
    console.log('o.kratLen   =', o.kratLen);
    console.log('o.remaining=', o.remaining);
    console.groupEnd();
  });

  // 1.3. Текущая длина ручья
  let riverLen = Number(dataRuchej.rych) || 0;
  console.log('1.3 исходная dataRuchej.rych => riverLen =', riverLen);

  // 1.4. Генерируем массив заготовок
  const slabRuchejArray = [];
  for (let idx = 0; idx < tableInf.length; idx++) {
    const order = tableInf[idx];
    console.group(`Обработка заказа ${idx} (ID_SEQ=${order.ID_SEQ})`);
    console.log('текущий riverLen =', riverLen);
    console.log('order.remaining =', order.remaining);

    // частичный кусок если riverLen меньше slabLen
    if (riverLen > 0 && riverLen < order.slabLen) {
      console.log(`  ● riverLen < slabLen (${riverLen} < ${order.slabLen}), добавляем "p_new" кусок`);
      slabRuchejArray.unshift({
        id:       'p_new',
        krat:     0,
        queue:    null,
        length:   riverLen,
        kratLen:  0,
        number:   dataRuchej.numberPlav
      });
      console.log('  pushed:', slabRuchejArray[0]);
      console.groupEnd();
      break;
    }

    // целые заготовки
    while (riverLen >= order.slabLen && order.remaining > 0) {
      console.log(`  ● добавляем заготовку заказа, riverLen=${riverLen} >= slabLen=${order.slabLen}`);
      const slab = {
        id:       order.ID_SEQ,
        krat:     order.kratLen,
        queue:    order.POSITION,
        length:   order.slabLen,
        kratLen:  order.kratLen,
        number:   dataRuchej.numberPlav
      };
      slabRuchejArray.unshift(slab);
      console.log('  pushed:', slab);
      riverLen -= order.slabLen;
      order.remaining--;
      console.log('  после: riverLen =', riverLen, ', order.remaining =', order.remaining);
    }

    // хвостовой кусок после исчерпания целых заготовок
    if (riverLen > 0 && order.remaining >= 0) {
      console.log(`  ● после заказа остался хвост riverLen=${riverLen}, добавляем "p_new"`);
      const tail = {
        id:       'p_new',
        krat:     0,
        queue:    null,
        length:   riverLen,
        kratLen:  0,
        number:   dataRuchej.numberPlav
      };
      slabRuchejArray.unshift(tail);
      console.log('  pushed tail:', tail);
      console.groupEnd();
      break;
    }

    console.groupEnd();
  }

  // 1.5. Восстанавливаем оригинальные остатки
  tableInf.forEach((o, i) => {
    o.remaining = originalRemaining[i];
  });
  console.log('1.5 восстановили originalRemaining в tableInf');

  // 1.6. Завершение
  dataRuchej = slabRuchejArray;
  console.log('1.6 итоговый slabRuchejArray:', slabRuchejArray);
  console.groupEnd(); // createData END
  return dataRuchej;
}


/**
 * 2) Считаем, сколько заготовок из dataRuchej «принадлежит» каждому заказу,
 *    и пишем это в tableInf[i].marked_count
 */
function markedCount(dataRuchej) {
  console.groupCollapsed('%cmarkedCount START', 'color: darkgreen; font-weight: bold;');
  console.log('2.1 входные dataRuchej:', dataRuchej);

  // 2.1. Считаем по ID
  const counts = {};
  dataRuchej.forEach((slab, i) => {
    console.log(` slab[${i}]:`, slab);
    if (slab.id === 'p_new') {
      console.log('  → пропускаем p_new');
      return;
    }
    counts[slab.id] = (counts[slab.id] || 0) + 1;
    console.log(`  → counts[${slab.id}] =`, counts[slab.id]);
  });
  console.log('2.1 итоговые counts:', counts);

  // 2.2. Обновляем tableInf
  tableInf.forEach((o, idx) => {
    console.group(`Обновляем заказ ${idx} (ID_SEQ=${o.ID_SEQ})`);
    const prev = o.marked_count;
    o.marked_count = counts[o.ID_SEQ] || 0;
    console.log('  previous marked_count =', prev);
    console.log('  new marked_count      =', o.marked_count);
    console.groupEnd();
  });

  console.groupEnd(); // markedCount END
}


























/**
 * 1) Формируем массив заготовок для ручья 
 *    на основании текущей длины ручья (dataRuchej.rych)
 *    и параметров каждого заказа из tableInf.
 *    Возвращаем новый массив dataRuchej.
 */
function createData() {
  console.groupCollapsed('▶ createData START');

  // 1. Подготовка локальных переменных для каждого заказа
  tableInf.forEach((o, idx) => {
    // тут мы *нормализуем* поля из любого регистра:
    const needRaw   = o.KOL1P    ?? o.kol1p    ?? 0;
    const cutRaw    = o.DLOT     ?? o.dlot     ?? 0;
    const markedRaw = o.marked_count ?? o.MARKED_COUNT ?? 0;
    const slabRaw   = o.SHOT     ?? o.shot     ?? 0;
    const kratRaw   = o.KRAT     ?? o.krat     ?? 0;

    // и сразу переводим в числа:
    o.need     = Number(needRaw)    || 0;
    o.cut      = Number(cutRaw)     || 0;
    o.marked   = Number(markedRaw)  || 0;
    o.slabLen  = Number(slabRaw)    || 0;
    o.kratLen  = Number(kratRaw)    || 0;
    o.remaining = o.need - o.cut - o.marked;

    console.log(
      `Заказ ${idx} (ID_SEQ=${o.ID_SEQ||o.id_seq}) после подготовки:`,
      `{ need:${o.need}, cut:${o.cut}, marked:${o.marked}, slabLen:${o.slabLen}, kratLen:${o.kratLen}, remaining:${o.remaining} }`
    );
  });

  // 2. Сохраняем оригинальные остатки *после* того, как они появились
  const originalRemaining = tableInf.map(o => o.remaining);
  console.log('originalRemaining:', originalRemaining);

  // 3. Текущая длина ручья
  let riverLen = Number(dataRuchej.rych) || 0;
  console.log('Initial riverLen:', riverLen);

  // 4. Генерируем массив заготовок
  const slabRuchejArray = [];

  for (let order of tableInf) {
    // часть, короче чем slabLen
    if (riverLen > 0 && riverLen < order.slabLen) {
      slabRuchejArray.unshift({
        id:       'p_new',
        krat:     0,
        queue:    null,
        length:   riverLen,
        kratLen:  0,
        number:   dataRuchej.numberPlav
      });
      console.log('Добавили partial slab p_new:', riverLen);
      break;
    }

    // целые заготовки
    while (riverLen >= order.slabLen && order.remaining > 0) {
      slabRuchejArray.unshift({
        id:       order.ID_SEQ    ?? order.id_seq,
        krat:     order.kratLen,
        queue:    order.POSITION  ?? order.position,
        length:   order.slabLen,
        kratLen:  order.kratLen,
        number:   dataRuchej.numberPlav
      });
      riverLen -= order.slabLen;
      order.remaining--;
      console.log(`Добавили slab of order ${order.ID_SEQ||order.id_seq}, осталось remaining=${order.remaining}, riverLen=${riverLen}`);
    }

    // остаток после заготовок
    if (riverLen > 0 && order.remaining >= 0) {
      slabRuchejArray.unshift({
        id:       'p_new',
        krat:     0,
        queue:    null,
        length:   riverLen,
        kratLen:  0,
        number:   dataRuchej.numberPlav
      });
      console.log('После всех заказов добавили финальный partial:', riverLen);
      break;
    }
  }

  // 5. Восстанавливаем оригинальные остатки
  tableInf.forEach((o, i) => {
    o.remaining = originalRemaining[i];
  });
  console.log('После restore remaining:', tableInf.map(o=>o.remaining));

  // 6. Финальный результат
  console.log('▶ createData END — slabRuchejArray length=', slabRuchejArray.length);
  console.groupEnd();

  dataRuchej = slabRuchejArray;
  return dataRuchej;
}




          
